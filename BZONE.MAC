	.TITLE BZONE
	.ENABLE AMA
	.RADIX 16
;*************************************************************************
;* DATE INITIATED:	25-APR-79
;*
;* PROJECT CHARGE #:	22503
;*
;* DISK NUMBER:		48, B32
;*
;* HARDWARE REQUIREMENTS:
;*			VECTOR HARDWARE WITH DELMAN'S AUTO-NORMALIZATION
;*			AND MATRIX MATH MODULE (INITIALLY LUNAR LANDER)
;*
;* MEMORY REQUIREMENTS:	VECTOR RAM:	4000-47FF
;*			VECTOR ROM:	4800-5FFF
;*			SCRATCH:	PAGE 0
;*			STACK:		PAGE 1
;*			PROGRAM ROM:	6000-7FFF
;*
;* INTERRUPTS:		NMI (4 US)
;*
;* ASSEMBLY COMMAND STRING: BZONE/A/C
;*
;* LINK COMMAND STRING: BZMTNS,BZONE,BZSOUN,VGUT,BZSTST
;*
;* PROGRAM DESCRIPTION:	1ST PERSON VIEW OF TRADITIONAL ATARI TANK GAME
;*
;* CONTROLS:		ULTRA TANK TYPE CONTROLS
;*
;*************************************************************************
	.PAGE

;********************************************************
;*							*
;*    DOCUMENTATION TECHNIQUE USED IN THIS PROGRAM	*
;*							*
;********************************************************
	.ENABL LC
	.IF EQ,1
	Running Comments:

	My approach to documentation via "running comments", is based on
what I will refer to as "atomic comments".  Basically, this is a system
that attempts to formalize a method for algorithmic assembler/macro
language programs.

	The object is simply to deliniate SMALL (1-20 instructions) segments
of your program that perform a single function, such as: A=B+C
							 IF-THEN-ELSE
							 move A to B

All program code consists of these atoms.  The scope of one atom extends from
the first instruction of that atom to the instruction immediately preceeding
the first instruction of the next atom.

These small "atomic" segments ROUGHLY correspond in scope with single statements
in a higher level language (i.e. PASCAL, ALGOL, BASIC, or even [God forbid!]
FORTRAN).  (Not FORTH however!)  Implicit in highlighting atomic segments is
the understanding that I try to document EVERY atom in the program.  (I do not,
however, always succeed in dong them all.  (CYA, oh CYA))  In a well documented
program of this type, the "atomic comments" tend to read more like a higher
level algorithm, than an assembler language program.

There are 3 basic types of atoms:

1)	Decision atoms

	These atoms are somewhat equivalent to IF statements.  They generally
have one entry and two exit points.  The object is to set off the FIRST
instruction of the segment that performs the decision function, and use its
comment to describe that condition which causes a conditional branch (or
group of) to execute.  For example: IF COUNT GREATER THAN MAX on a decision
atom states not only the condition of the branch, but implies the condition
under which the next sequential atom is executed, avoiding unnecessary (under
this scheme) comments such as:

			;COUNT > MAX?
			;YES
			;NO

			;YES
			;MAYBE

2)	Computational atoms

	Simply this, all basic mathematical and logical calculations, most
data manipulation.  While computational atoms may contain conditional
branches, their scope MUST NOT cross outside a single atom.  (This is not
an excuse for making humongous run-on atoms [polyester?].)  They are always
top-down, containing one entry and one exit only.  These are generally the
most numerous type of atom.

3)	Branch atoms

	Any un-conditional branches.

	In addition, I have found that two sub-species of computational
atoms are very useful.  They are Synchronization atoms and Linkage atoms.
Their particular functions are obvious, bearing in mind that they are, in
essence, computational atoms.

	One good fallout of using this scheme is that you are encouraged to
write in small, structured segments.  Even if you have speed problems, they
are usually confined to a small minority of the program's modules and/or
routines.  These must, of course, be programmed in whatever god-awful (or
elegant) way is necessary.

	In my code, "atomic comments" are set off from other clarification
comments in two ways.  Clarification comments are indented from the semi-
colon, and computation atoms are marked by type with the first character
following the semi-colon, followed by two (or one) spaces.

	EXAMPLE:

	LDA TYPE		;D  IF A SYSTEM DEVICE
	CMP I,DISK
	BEQ 40$
	CMP I,MAGTAP
	BEQ 40$
	CMP SYSDEV		;	USER DEFINED SYSTEM DEVICE
	BEQ 40$
	JSR CHRGET		;C  GET NEXT CHARACTER

;D	=DECISION
;B	=BRANCH
;C	=COMPUTATION
;L	=LINKAGE
;S	=SYNCHRONIZATION

	This description is not meant as a comprehensive treatment of the
documentation system that I use, merely an introduction.  The basic tenets
of the system are not intended to be restrictive of sytle.  Personally, I
do not comment what individual instructions do.   If the programmer reading
the code doesn't know, he should read a manual and if he is not a programmer
(or some knowledgeable equivalent), he should not tamper with the goods.
ALL "tricks" are documented fully.  I NEVER allow running comments to continue
from one line of code to succeeding ones.  If they are too long, they can be
continued in a purely commentary lines, or more likely, set off in a small
comment block and not used as running comments.

	I feel that even though it is sometimes difficult to document rushed
code, I try to at least document all the atoms briefly.  This has proved to be
no great hardship and in fact greatly useful.

	I have refrained from giving many examples as there are plently in the
code that follows.
	.ENDC
	.DSABL LC
	.SBTTL GLOBALS
;
;VECTOR GENERATOR:  ROUTINE GLOBALS
;
	.GLOBL VGSIZE,XCOMP,TEMP1,VGLIST,VGBRIT
;
;EXTERNAL ENTRY POINTS
;
	.GLOBL VGHALT,VGVCTR,VGRTSL
	.GLOBL VGJMPL,VGJSRL,VGCNTR
	.GLOBL VGADD,VGSCAL,VGADD2
	.GLOBL VGHEX,VGHEXZ,VGDOT
	.GLOBL VGSCA1,VGVTR2,VGSTAT
	.GLOBL VGVTR,VGVTR1,BONTBL,MISLVL
	.GLOBL MTNS,VGMSGA,XCROSS,EXPIC,XCROS1
	.GLOBL CRACKS,TSYMBL,RDRING,SAUSND
	.GLOBL ATRACT,POINT,HORIZN,SUPBON
	.GLOBL BLKSND,BONER,BOING,RBEEP
	.GLOBL SNDON,MODSND,WARNG,DISINT
	.GLOBL EOZP,VECRAM,LIDLE,SNDWRD
	.GLOBL TPOSX,TPOSY,VSTOP,SKCTL
	.GLOBL GOVER,ACTION,CHAN3F,CHAN4F
	.GLOBL EXPTBX,EXPTBY,ARCTAN,OBJPNT
	.GLOBL PWRON,NMI,YLOW,YHIGH
	.GLOBL BATBL,TLETBL,ZONTBL
	.GLOBL IZVEL,EXPTBY,PTBLO1,LOGOBJ
	.GLOBL WTCHDG,HALT,ST.BIT,SOUND
	.GLOBL MAIN,POKEY,CHAN1F,CHAN2F
	.GLOBL CHAN1V,CHAN2V,INITLS
	.GLOBL HSCTBL,BATINT,MBOXIN,MBSTAT
	.GLOBL OPTION,OPTON2,DIGTYS,DIGT2S
	.GLOBL DIGITS,GOADD,POTGO,ALLPOT
	.GLOBL MSTAT,MOUTHI,MOUTLO,TEMP1
	.GLOBL TEMP2,TEMP3,PNTTBL,VGSIZE
	.GLOBL VGBRIT,VGLIST,SAVE0,SAVE1

;
;COIN OPTIONS
;
CNTINT	=0
COIN	=0
COIN01	=1
$COINA	=800
EMCTRS	=3
INCLUDE	=1
SLAM	=0
MECHS	=3
EMCNT	=1000
$LAM	=800
$LMBIT	=8
BONADD	=1
	.SBTTL PAGE 0
	.BSECT
VGSIZE:	.BLKB 1			;SCALING SIZE
VGBRIT:	.BLKB 1			;VECTOR BRIGHTNESS
VGLIST:	.BLKB 2			;VECTOR LIST POINTER
XCOMP:	.BLKB 4			;X COMPONENT FOR VECTOR DELTA
YCOMP	=XCOMP+2		;Y COMPONENT FOR VECTOR DELTA
TEMP1:	.BLKB 2			;SCRATCH
TEMP2:	.BLKB 2
TEMP3:	.BLKB 2
$$CRDT:	.BLKB 1			;GAME CREDITS
EXPCNT:	.BLKB 1			;EXPLOSION COUNTER
SAVE0:	.BLKB 2			;SCRATCH
COLFLG:	.BLKB 1			;COLLISION FLAG
SAVE1:	.BLKB 2			;SCRATCH
SNDWRD:	.BLKB 1			;SOUND WORD
SAVE2:	.BLKB 2			;SCRATCH
SAVE3:	.BLKB 1			;WORKING STORAGE FOR ROTAT
X1:	.BLKB 2
X2:	.BLKB 2
Y1:	.BLKB 2
Y2:	.BLKB 2
$CNCT:	.BLKB 1			;COIN COUNT
DDEND:	.BLKB 2			;INPUT DIVIDEND FOR DIVIDE
FIRECT:	.BLKB 1			;COUNTER FOR SHELL TIMER
DQUE:	.BLKB 2			;DEPTH LVE FOR DIMMING OBJECTS
LANGLE:	.BLKB 1			;LSB OF 9 BIT ANGLE IN D7
BUFRDY:	.BLKB 2			;BUFFER READY FOR DOUBLE BUFFER SYNCH
TANGLE:	.BLKB 1			;TANK ANGLE
NTHETA:	.BLKB 2			;OBJECT'S ORIENTATION, TANK ANGLE
TPOSX:	.BLKB 4			;TANK'S X POSITION
TPOSY:	.BLKB 4			;   "   Y     "
CURNTX:	.BLKB 2			;CURRENT BEAN POSITION X
CURNTY:	.BLKB 2			;	"	"      Y
SYNC:	.BLKB 1			;NMI. MAIN LOOP SYNCHRONIZATION
$INTCT:	.BLKB 1			;INTERRUPT COUNTER
TBLPTR:	.BLKB 2			;POINTER FOR TABLE
NPTS	=26.
PNTTBL:	.BLKB <NPTS*4>		;POINT TABLE
TRDCTR:	.BLKB 1			;GARBAGE SAVE
GARBAG:	.BLKB 2			;X & Y OF SHELL POSITIONS
SHELLX:	.BLKB 4
SHELLY:	.BLKB 4
SINCX:	.BLKB 4			;X & Y SHELL INCREMENTS
SINCY:	.BLKB 4
HITS:	.BLKB 4			;NUMBER OF HITS (SCORE)
RGOAL:	.BLKB 1			;TARGET ANGLE FOR ROBOT
SXPCNT:	.BLKB 1			;SHELL EXPLOSION COUNTER
RANGLE:	.BLKB 1			;RADAR ANGLE
SANGLE:	.BLKB 1			;SAUCER ORIENTATION
OTPOSX:	.BLKB 2			;OLD POSITIONS FOR TANKS TO BACF OUT OF COLL.
OTPOSY:	.BLKB 2
ACTION:	.BLKB 1			;ROBOTS CURRENT DISPOSITION
STATE:	.BLKB 1			;CALIFORNIA (HERE)
FRAME:	.BLKB 1			;FRAME COUNTER
CRACK:	.BLKB 1			;CRACKED WINDSHIELD COUNTER
OBJCOL:	.BLKB 1			;OBJECT COLLISION FLAG
EIRNGE:	.BLKB 2			;ENEMY IN RANGE FLAG
R2D3FL:	.BLKB 1			;BUZZ BOMB FLAG
LIVES:	.BLKB 1			;LIVE REMAINING
GOVER:	.BLKB 1			;GAME OVER & HISCORE TABLE DISPLAY
ATRACT:	.BLKB 1			;ATTRACT FLAG
SKILL:	.BLKB 1			;SKILL OF PLAYER
PTURN:	.BLKB 1			;AMT FOR PLAYER TO TURN
FTIMER:	.BLKB 1			;TIMER FOR ALTERNATING ATTRACT STATES
TIMOUT:	.BLKB 1			;TANK TIME OUT
STIMER:	.BLKB 1			;SAUCER TIMER
SCOLFG:	.BLKB 1			;SAUCER COLLISION FLAG
SAPOSX:	.BLKB 2			;SAUCER POSITION
SAPOSY:	.BLKB 2
SCANGL:	.BLKB 1			;SAUCER ANGLE
SAINCX:	.BLKB 2			;SAUCCR MOTION INCREMENTS
SAINCY:	.BLKB 2
SAUCER:	.BLKB 1			;SAUCER FLAG
BOUNCE:	.BLKB 1			;COLLISION BOUNCE VIEW AMT
$CCTIM:	.BLKB EMCTRS		;COIN STUFF
	.BLKB 1
$PSTSL:	.BLKB MECHS
$CNSTT:	.BLKB MECHS
$LMTIM:	.BLKB 1
$CMODE:	.BLKB 1
$BCCNT:	.BLKB 1
VTIMER:	.BLKB 1			;VG TIMER
EOZP	=.
	.ASECT
	.=200
NOBJ	=28.
PTBLX2:	.BLKB NOBJ*2		;ROTATED & TRANSLATED OBJECT TABLE
PTBLY2:	.BLKB NOBJ*2
PTBLO2:	.BLKB NOBJ*2
EXNOBJ	=8
EXPOSX:	.BLKB EXNOBJ*2		;EXPLOSION OBJECT TABLE
EXPOSY:	.BLKB EXNOBJ*2
EXPOSO:	.BLKB 1
ZVELOC:	.BLKB EXNOBJ*2-1	;Z VELOCITY FOR EXPLOSION PIECES
EXPOSZ:	.BLKB 2*EXNOBJ		;Z POSITION FOR EXPLOSION PIECES
TDIST:	.BLKB 1			;
BLIP:	.BLKB 1			;BLIMP TIMER
SINT:	.BLKB 1			;SAUCER INTENSITY
PL1MOV:	.BLKB 1			;TEMP FOR POKEY SWITCH INPUT
NOR2D3:	.BLKB 1			;# OF R2D3'S -1 THIS GAME
TRAP2:	.BLKB 2			;SECURITY TRAP
	.=300
HSCNUM	=10.
HSCTBL:	.BLKB 3*HSCNUM			;HIGH SCORES
INITLS:	.BLKB 3*HSCNUM		;INITIALS
DSPLAY:	.BLKB 1			;ATTRACT DISPLAY STATE
STINTL:	.BLKB 3			;CURRENT INITIAL INPUT
SAVX:	.BLKB 1			;SCRATCH FOR X
LTIMER:	.BLKB 1			;INITIAL ENTRY TIMOUT
LETR:	.BLKB 1			;
OLSTAT:	.BLKB 1			;
NWSTAT:	.BLKB 1			;SWITCH STATUSES
SUPER:	.BLKB 1			;SUPER BONUS FLAG
LOGOX:	.BLKB 2			;LOGO POSITIONS
LOGOZ:	.BLKB 2			;POKEY RANDOMNESS IMPROVEMENT
OLDRND:	.BLKB 1
LOGO:	.BLKB 2			;-1 IF DISPLAYING LOGO IN ATTRACT
NOROCK	=5
OBJTIM:	.BLKB NOROCK		;VOLCANO STUFF - SEE RUBIN
XSPD:	.BLKB NOROCK
YSPD:	.BLKB NOROCK
XPOSL:	.BLKB NOROCK
XPOSH:	.BLKB NOROCK
YPOSL:	.BLKB NOROCK
YPOSH:	.BLKB NOROCK
TRAP1:	.BLKB 1			;SOFTWARE SECURITY
YDISP:	.BLKB 1			;SCREEN YDISPLACEMENT - FOR HISCORE DISPLAY USE
;VECTOR ADDRESSED
VECRAM	=2000			;VECTOR RAM
HALT	=800			;D0=1 FOR HALTED
GOADD	=1200			;RESTART FOR VECTOR GEN
VSTOP	=1600
;
;MISC I/O ADDRESSES
;
WTCHDG	=1400
HDIV	=1
DIVOUT	=186F
MSTAT	=1800
MBOXIN	=1860
MBSTAT	=MSTAT
MOUTHI	=1818
MOUTLO	=1810
YHIGH	=MOUTHI
YLOW	=MOUTLO
TPOSXT	=MSTAT+64
TPOSYT	=MSTAT+66	
ACOS	=MSTAT+60
BSIN	=MSTAT+62
XMATRX	=MSTAT+68
YMATRX	=MSTAT+6A
YSTRT1	=MSTAT+6B
RSTRT1	=MSTAT+72
YSTRT2	=MSTAT+71
ZLOW	=MSTAT+6D
ZHI	=MSTAT+6E
DIVCYC	=MSTAT+6C
ZDIV	=MSTAT+74
XPL	=MSTAT+75
XPH	=MSTAT+76
DXP	=MSTAT+77
DYPH	=MSTAT+79
DSTNCE	=MSTAT+7D
DST2	=MSTAT+7E
PL1FIR	=10			;PLAYER 1 FIRE
ST.BIT	=10
LIDLE	=0
HIDLE	=10
EXPLOD	=1
HIX	=0FD
LOX	=2
LOUDSH	=8
SOFTSH	=0F7
SOUND	=1840
LAMP	=20
TNKPRX	=38
CENTRX	=0
CENTRY	=316.
GRAVTY	=-4.
TOP	=200
SWOOP	=100
STARTZ	=1800
START	=20
COMAND	=20
OPTON2	=0C00
OPTION	=0A00
;
;POKEY
POKEY	=1820
SKCTL	=POKEY+0F		;POKEY SCAN KEYBOARD CONTROL
PRAND	=POKEY+0A
POTGO	=POKEY+0B		;START POT READ
ALLPOT	=POKEY+8		;POT INPUT WORD
CHAN1F	=POKEY
CHAN1V	=POKEY+1
CHAN2F	=POKEY+2
CHAN2V	=POKEY+3
CHAN3F	=POKEY+4
CHAN3V	=POKEY+5
CHAN4F	=POKEY+6
CHAN4V	=POKEY+7
AUDCTL	=ALLPOT
	.MACRO LAH ADDR
	LDA I,0
	.=.-1
	.ENABL M68
	.WORD ADDR
	.DSABL M68
	.=.-1
	.ENDM
	.MACRO LXL ADDR
	LDX I,0
	.=.-1
	.WORD ADDR
	.=.-1
	.ENDM

	.SBTTL MAIN LOOP
	.=5000
MAIN:	LSR SYNC		;S  SYNC UP
	BCC MAIN
	JSR VOLCNO
5$:	LDX BUFRDY		;S  USE AVAILABLE BUFFER
	BEQ 5$
	LDA I,VECRAM&0FF+2
	STA VGLIST
	STX VGLIST+1
	LDA I,1	
	JSR VGSCA1		;C  SET SCALING
	JSR VGCNTR
	LDA I,-127.		;C  SET LOWER WINDOW
	TAX
	LDY I,0
	JSR VGVTR
	LDA I,0
	JSR VGSTAT
	INC FRAME
	BNE 6$
	INC TIMOUT
	LDA TIMOUT
	CMP I,4
6$:	BIT GOVER
	BPL 1$
	JSR BIGWND
	JMP HISCRE
1$:	BIT ATRACT
	BMI 3$
	LDA CRACK		;	ALLOW ENDING SEQUENCE TO FINISH
	BNE 3$
	BCC 10$
	JSR TANKCK
	LDX I,3			
	LDA DSPLAY
	EOR I,80
	STA DSPLAY
	STX TIMOUT
	STA FRAME
	BMI 10$			;D  IF GOING INTO DISPLAY
	BIT ATRACT		;C CLOSE WINDOW
	BMI 15$
	LDA I,-1		;C  SET UP FOR LOGO
	STA LOGO
10$:	BIT DSPLAY
	BPL 15$
	JSR BIGWND
	JMP DISTBL
3$:	BCC 15$
	BIT R2D3FL
	BMI 15$
	JSR R2D3CK
15$:	JSR VGCNTR		;C  SET UPPER WINDOW
	LDA I,127.
	LDX I,48.
	LDY I,0
	JSR VGVTR
	LDA I,2
	JSR VGSTAT
	BIT ATRACT		;D  IF GAME
	BMI 16$
	LDX I,COPYRT		;C  COPYRIGHT 1980
	JSR MSGS
16$:	JSR MOUNTS		;C  DRAW MOUNTAINS & HORIZON
	DEC ACTION
	LDA FTIMER
	CMP I,0FF
	BEQ 18$
	INC FTIMER
18$:	LDA I,10.		;C  INIT DIVIDER
	STA DIVCYC
	LDA I,0			;C  INIT INDEX
	STA SAVE0
	JSR ROTATE		;C  CHOOSE OBJECTS IN VIEW
	JSR BATTLE
20$:	LDX SAVE0		;C  NEXT TABLE VALUE
	LDA AX,PTBLO2		;D  IF END OF TABLE
	BMI 30$
	JSR PNTPUT
	LDX SAVE0		;C  GET OBJECT # IN A
	LDA AX,PTBLO2
	JSR DRAW		;C  GENERATE VECTOR INSTRUCTIONS
	INC SAVE0		;C  NEXT OBJECT
	INC SAVE0
	BNE 20$
30$:	LDA CRACK
	BEQ 31$
	JMP WNSHLD
31$:	JSR BIGWND		;C  OPEN WINDOW
	JSR DRADAR
35$:	JSR TRACK		;D  IF ROBOT IN SIGHTS
	EOR I,80
	SEC
	SBC TANGLE
	STA SAVE2
	BPL 41$
	CLC
	EOR I,0FF
	ADC I,1
41$:	STA PTURN
	BIT LOGO
	BMI 50$
	CMP I,2
	LDA FIRECT
	BEQ 42$
	LDA I,20
	AND $INTCT
	BEQ 50$
42$:	BCC 45$
43$:	LXL XCROSS
	LAH XCROSS
	BNE 48$			;B
45$:	LXL XCROS1
	LAH XCROS1
48$:	JSR VGJSRL
50$:	LDA COLFLG+2
	BNE 53$
	BIT ATRACT		;D  IF NOT ATTRACT
	BMI 51$
	LDA VGLIST+1		;C  SECURITY
	AND I,0F8
	STA TBLPTR+1
	LDA I,2
	STA TBLPTR
	LDY I,35
	LDA I,0
99$:	EOR NY,TBLPTR
	DEY
	BPL 99$
	LSR
	STA TRAP2
	BIT LOGO		;D  IF SHOWING LOGO
	BMI B.END
51$:	LDA I,2			;C  FLASH MSG
	AND FRAME
	BEQ 53$
	LDA PTURN		;D  IF ROBOT IN VIEW
	CMP I,22.
	BCC 53$
	LDX I,ETO		;C  POINT DIRECTION
	JSR MSGS
	LDX I,REAR
	LDA I,6B
	CMP PTURN
	BCC 52$
	LDX I,LEFT
	BIT SAVE2
	BPL 52$
	LDX I,RIGHT
52$:	JSR MSGS
53$:	LDA OBJCOL
	BEQ B.END
	LDA FRAME
	AND I,4
	BNE B.END
	LDX I,BLOCKD
	JSR MSGS
B.END:	JSR INFO		;C  DISPLAY STATS
	LDA GOVER		;C  IF IN GAME
	BEQ 15$
	LDA CRACK
	BNE 15$
	BIT LOGO		;D  IF LOGO
	BMI 15$
	LDX I,GAMOVR		;C  OUTPUT GAME OVER
	JSR MSGS
	LDA $$CRDT		;D  IF NO COINS NEEDED
	BNE 10$
	LDA $CMODE
	AND I,3
	BEQ 10$
	ASL			;C  OUTPUT COIN MODE
	ADC I,MODE1-2
	TAX
	JSR MSGS
	LDX I,CONPLY
	JSR MSGS
	LDX I,INSCON		;C  INSERT COIN
	BNE 13$
10$:	LDX I,PRSTRT
13$:	BIT $INTCT
	BVC 15$
	JSR MSGS
15$:	JSR FINISH
	BIT SUPER		;D  IF SUPER BONUS
	BMI 30$
	LDA I,4
	STA SAVE3
18$:	JSR COLCHK		;C  CHECK COLLISIONS
	JSR SHUPDT
	DEC SAVE3
	BNE 18$
	BIT R2D3FL		;D  IF SLOW TANK, DON'T DO QWIKCK
	BMI 17$
	JSR TR7CHK
	BCC 19$
17$:	JSR QWIKCK
19$:	JSR ROBOT
	JSR SAUCMV
	JSR BOUND
	JSR MOTION		;C  UPDATE TANK POSITION
20$:	JMP MAIN		;C  NEXT MOVE
30$:	LDA TRAP2
	LSR
	ORA Z,POINT
	BNE 20$
	STA SUPER
	LDA SNDWRD
	ORA I,LOX
	STA SNDWRD
	LDA I,-1
	STA EXPCNT
	BNE 20$
BIGWND:	JSR VGCNTR		;C  SET UPPER WINDOW
	LDY I,0
	LDA I,127.
	TAX
	JSR VGVTR
	LDA I,2
	JMP VGSTAT
WNSHLD:	LDY I,0			;C  INIT INDEX
	STY CHAN4V
10$:	LDA AY,CRACKS		;C  OUTPUT ONE SECTION
	LDX AY,CRACKS+1
	STY TEMP1
	JSR VGADD2
	LDY TEMP1
	INY
	INY
	CPY CRACK		;D  IF DONE
	BCS 20$
	CPY I,8*2		;D  IF NOT FULL PICTURE
	BCC 10$
	LDA I,16*2		;D  IF NOT DONE COMPLETELY
	CMP CRACK
	BCS 20$
	LDA FIRECT
	BNE 18$
;	LDA I,0			;C  RESET CRACK
	STA CRACK
	STA STATE
	STA COLFLG
	STA FTIMER
	LDX GOVER
	BEQ 13$
	STA ATRACT		;C  SET TO ATTRACT
	STA OBJCOL
	JMP CKSCOR
13$:	LDA I,30
	STA ACTION
	LDA PRAND		;C  RESET POSITION
	STA RGOAL
	STA TPOSX
	LDA PRAND
	STA TPOSY
15$:	LDA PRAND
	AND I,3F
	STA TPOSX+1
	LDA PRAND
	STA TPOSY+1
	LDX I,0
	JSR OBJOBJ		;D  IF IN COLLISION
	BCS 15$
	STX OBJCOL		;C  MAKE SURE NOT IN OBJECT COLLISION
	STX EIRNGE
	LDA PRAND		;C  RESET ANGLE
	STA TANGLE
	BIT R2D3FL		;D  IF BLOWN UP BY TANK
	BPL 17$
	JSR TANKCK
	JMP B.END		;C  INSURE TANK
17$:	LDA COLFLG+2		;D  IF OTHER TANK NOT BLOWN UP
	BNE 18$
	JSR ROBCHK		;C  MOVE TANK IN FRONT OF HIM
18$:	JMP B.END		;B
20$:	INC CRACK		;C  INCREMENT CRACK
	INC CRACK
	BNE 18$			;B
	.PAGE
	.SBTTL BATTLE ZONE LOGO
;BLOCK NAME: BATTLE
;BLOCK DESCRIPTION: HANDLE LOGO DISPLAY
;REGISTERS A,X,Y
	
BATTLE:	BIT ATRACT
	BMI 5$
	LDA VGLIST+1
	AND I,0F8
	STA TBLPTR+1
	LDA I,2
	STA TBLPTR
	LDY I,35
	LDA I,0
	SEC
99$:	SBC NY,TBLPTR
	DEY
	BPL 99$
	SEC
	SBC OBJTBL+21
	STA TRAP1
	BIT LOGO		;D  IF LOGO
	BMI 10$
5$:	RTS
10$:	LDA LOGOZ+1		;D  IF DONE WITH SEQUENCE
	BMI 13$
	CMP I,2
	BCC 13$
	JMP BATINT
13$:	LDX I,0			;C  FIND NEX SPOT IN TABLE
15$:	LDA AX,PTBLO2
	BMI 20$
	INX
	INX
	BNE 15$
20$:	LDA I,0F0		;C  SET BRITENESS
	STA SINT
	LDY I,0
22$:	LDA AY,LOGOBJ		;C  SET UP OBJ #,X,Y
	STA AX,PTBLO2
	LDA LOGOX
	STA AX,PTBLX2
	LDA I,0
	STA AX,PTBLY2
	INX
	INY
	LDA TANGLE		; USE TANKS ANGLE
	STA AX,PTBLO2
	LDA LOGOX+1
	STA AX,PTBLX2
	LDA I,0
	STA AX,PTBLY2
	INX
	INY
	LDA LOGOZ+1		;D  THE ULTIMATE KLUDGE, IF LOGO HIGH
	BPL 90$			;	ENOUGH TO BRING OUT "ZONE"
	CMP I,0FD
	BCS 90$
	LDA LOGOZ
	CMP I,0B0
	BCS 90$
	CPY I,3			;	DON'T DRAW "ZONE" UNTIL WE HAVE
	JMP 95$			;	ENOUGH TIME
90$:	CPY I,5
95$:	BCC 22$
	LDA LOGOZ		;C  SET UP Z
	LDY LOGOZ+1
	STA EXPOSZ+0C
	STY EXPOSZ+0D
	STA EXPOSZ+0E
	STY EXPOSZ+0F
	CLC			;C  UPDATE Z
	ADC I,8
	STA LOGOZ
	BCC 25$
	INY
25$:	STY LOGOZ+1
	CLC
	LDY LOGOX+1		;C  UPDATE DISTANCE
	LDA LOGOX
	ADC I,40
	STA LOGOX
	BCC 30$
	INY
30$:	STY LOGOX+1
	LDA I,-1		;C  END TABLE
	STA AX,PTBLO2
	RTS
BATINT:	LDA I,-4		;C  INIT POSITION
	STA LOGOZ+1
	LDA I,0
	STA LOGOX
	STA LOGOZ
	STA LOGO
	LDA I,4
	STA LOGOX+1
	LDA I,3			;C  TEMPORARY
	STA TIMOUT
	LDA I,0
	STA DSPLAY
	STA FRAME
	RTS
CHKS2:	.BYTE 70
	.ASCII /EDR/
	.PAGE
	.SBTTL HIGH SCORE STUFF
;
;MOST OF THIS JUNK IS TO HANDLE
;HIGH SCORE STUFF
;
CKSCOR:	LDX I,0
	STX TIMOUT		;C  RESET TIMER
	STX DSPLAY
10$:	LDY AX,HSCTBL		;D  IF GOOD ENOUGH TO MAKE TABLE
	CPY HITS
	LDA AX,HSCTBL+1
	SBC HITS+1
	BCC 20$
	INX
	INX
	INX
	CPX I,HSCNUM*3		;D  IF NOT DONE
	BCC 10$
	JMP B.END		;B  NOT GOOD ENOUGH
20$:	LDA I,0			;C  RESET TIME OUT
	STA FRAME
	STA LETR
	STX SAVX
	STA OBJCOL		;C  KILL ANY CONTINUOUS SOUNDS
	STA SCOLFG
	STA SAUCER
	LDA I,SUPBON		;C  PLAY THE TUNE FOR THE TURKEY
	JSR SNDON
	LDA GOVER		;C  SET HI SCORE MODE
	ORA I,80
	STA GOVER
	LDX I,<HSCNUM-1>*3
25$:	CPX SAVX		;C  MOVE SCORES & INITIALS DOWN
	BEQ 30$			;   IF DONE
	LDA AX,HSCTBL-3
	STA AX,HSCTBL
	LDA AX,HSCTBL-2
	STA AX,HSCTBL+1
	LDA AX,INITLS-3
	STA AX,INITLS
	LDA AX,INITLS-2
	STA AX,INITLS+1
	LDA AX,INITLS-1
	STA AX,INITLS+2
	DEX
	DEX
	DEX
	BPL 25$			;B  
30$:	LDA HITS		;C  INSERT NEW SCORE IN TABLE
	STA AX,HSCTBL
	LDA HITS+1
	STA AX,HSCTBL+1
	LDA I,4
	STA LTIMER
	LDA I,16		;C  SET UP INITIALS
	STA STINTL
	LDA I,4C
	STA STINTL+1
	STA STINTL+2
	JMP B.END		;B
HISCRE:	LDA TIMOUT
	CMP I,4
	BCS 60$			;D  IF TIMOUT
	LDA Z,POINT		;D  SEE IF OVERTURE OVER (TURE)
	BNE 10$
	LDX HITS+2		;D  IF EPLO DONE ALREADY ( CHEAP TRICK )
	BEQ 10$
	STA HITS+2		;C  MAKE CHEAP TRICK VIABLE
	LDA I,2
	STA SNDWRD		;C  CANNON EXPLOSION
	LDA I,-1
	STA EXPCNT
10$:	JSR INFO
	LDX I,LINE1		;C  OUTPUT INSTRUCTIONS
	JSR MSGS
	LDX I,LINE2
	JSR MSGS
	LDX I,LINE3
	JSR MSGS
	LDX I,LINE4
	JSR MSGS
	JSR LETCHK		;C  LETTER CHANGE
	LDA ALLPOT		;D  IF BUTTON NOT PUSHED ( AND DEBOUNCE )
	STA NWSTAT
	EOR OLSTAT
	AND NWSTAT
	LDX NWSTAT
	STX OLSTAT
	AND I,PL1FIR
	BEQ 20$
	LDX LETR		;D  IF LAST LETTER
	CPX I,2
	BCS 60$
	INX			;C  NEXT LETTER
	STX LETR
	LDA I,16		;	BLANK NEXT LETTER
	STA AX,STINTL	
20$:	JSR VGCNTR
	LDY I,0			;C  OUTPUT INITIALS
	STY VGSIZE
	LDA I,-18.
	LDX I,-18.
	JSR VGVTR
	LDX I,0
30$:	STX TEMP1
	LDA AX,STINTL
	JSR DSPALP
	LDX TEMP1
	INX
	CPX I,3
	BCC 30$
	JSR FINISH
	JMP MAIN
60$:	LDX SAVX		;MOVE INITIALS
	LDY I,0
61$:	LDA AY,STINTL
	STA AX,INITLS
	CPY I,2
	BCC 65$
	LDA I,3
	STA TIMOUT
	STA GOVER
	LDA I,81
	STA DSPLAY
	STA FRAME
	JMP MAIN
65$:	INX
	INY
	BNE 61$
LETCHK:	STA POTGO		;C  READ CONTROLLER
	LDA ALLPOT
	AND I,3			;D  IF PUSHED
	BNE 10$
3$:	LDA I,4			;C  RESET TIMER
	STA LTIMER
5$:	RTS
10$:	DEC LTIMER		;C  DELAY
	BNE 5$
	LDX LETR		;C  GET LETTER
	LDY AX,STINTL
	LSR			;D  IF INCREMENT LETTER
	BCC 30$		
	DEY			;C  DECREMENT LETTER
	DEY
	CPY I,16
	BCS 40$
	LDY I,4A
	BNE 40$
30$:	INY			;C  INCREMENT LETTER
	INY
	CPY I,04C
	BCC 40$
	LDY I,16
40$:	TYA
	STA AX,STINTL
	BNE 3$			;B  
DISTBL:	JSR INFO		;C  OUTPUT CURRENT SCORE
	LDX I,HISCOR
	JSR MSGS
	JSR VGCNTR
	LDY I,0
	STY SAVX
	LDA I,-32.
	LDX I,30.
	STX YDISP
10$:	JSR VGVTR
	LDX SAVX
	LDA AX,HSCTBL
	STA TEMP2
	ORA AX,HSCTBL+1		;D  IF DONE
	BEQ 40$
	LDA AX,HSCTBL+1		;C  OUTPUT SCORE
	STA TEMP2+1
	LDA I,TEMP2
	JSR DIGT2S
	LDX I,ZEROS
	JSR MSGS
20$:	LDX SAVX		;C  OUTPUT INITIALS
	LDA AX,INITLS
	JSR DSPALP
	LDX SAVX
	LDA AX,INITLS+1
	JSR DSPALP
	LDX SAVX
	LDA AX,INITLS+2
	JSR DSPALP
	LDY I,0
	LDX SAVX
	LDA AX,HSCTBL+1		;D
	BEQ 25$
	TAX
	LDA VGMSGA		;C  BLANK BEFORE TANK
	STA NY,VGLIST
	INY
	LDA VGMSGA+1
	STA NY,VGLIST
	CPX I,10.
	BCC 23$
	LDX I,10.
23$:	INY
	LDA TSYMBL		;C
	STA NY,VGLIST
	INY
	LDA TSYMBL+1
	STA NY,VGLIST
	DEX
	BNE 23$
	JSR VGADD
25$:	LDX SAVX		;D  IF DONE
	CPX I,<HSCNUM-1>*3
	BCS 40$
	INX			;C  NEXT
	INX
	INX
	STX SAVX
	JSR VGCNTR		;C MOVE BEAM TO NEXT LINE
	LDA YDISP
	SEC
	SBC I,10.
	STA YDISP
	TAX
	LDA I,-32.
	LDY I,0
	JMP 10$
	.ASCII /ER/
40$:	LDA OPTION
	LSR			;C SET TEMP2 W/BONUS LEVEL
	LSR
	LSR
	LSR
	AND I,3
	BEQ 45$
	TAX
	LDA AX,BONTBL
	CLC
	SED
	ADC I,1
	CLD
	STA SAVE1
	LDX I,BONPLN
	JSR MSGS		;C OUTPUT BONUS MESSAGE
	LDA I,SAVE1		;C OUTPUT BONUS LEVEL
	LDY I,1
	JSR DIGTYS
	LDX I,BONPL1		;C  OUTPUT REMAINING MESSAGE
	JSR MSGS
45$:	JSR FINISH
	JMP MAIN
DSPALP:	TAY			;C  OUTPUT ALPHA NUM CHAR.
	LDX AY,VGMSGA+1
	LDA AY,VGMSGA
	JMP VGADD2
FINISH:	JSR VGHALT		;C  STOP VG
	LDA I,0			;C  INDICATE BUFFER READY
	STA BUFRDY
	BIT ATRACT		;C  SECURITY
	BPL 10$
	LDA NOR2D3
	BMI 10$
	CMP I,4
	BCC 10$
	LDA TRAP1
	STA VECRAM
10$:	RTS
	.PAGE
	.SBTTL INTERRUPT ROUTINE
;
;BLOCK NAME:	NMI
;DESCRIPTION:	INCREMENTS INTERRUPT COUNT, MAINTAINS SYNC, HANDLES COINS,
;		KEEPS VECTOR GENERATOR GOING
;
;SUBROUTINES:	MOOLAH,MODSND,SNDON,RDBCHK
;
NMI:	PHA			;L  SAVE REGISTERS
	TXA
	TSX
	BMI 2$			;D  IF STACK BLITZED
	PHA
	INC $INTCT		;C  UPDATE INTERRUPT COUNT
	LDA $INTCT		;D  IF NOT END OF FRAME (64 MS)
	AND I,0F
	BNE 10$
	INC SYNC		;S  MAINTAIN SYNCHRONIZATION
2$:	BMI 2$			;D  IF LOST
10$:	TYA
	PHA
	CLD			;C  INSURE WE DON'T SCREW UP COINS IN BINARY
	STA WTCHDG
	LDA OPTON2		;C  SET COIN MODE
	STA $CMODE
	JSR MOOLAH		;C  LOOK FOR MONEY
	LDA $CCTIM
	ROL
	LDA $CCTIM+1
	ROL
	ROL
	PHA
	LDA $CCTIM+2
	ROL
	PLA
	ROL
	STA EMCNT
	JSR MODSND
	BIT SUPER		;D  IF SUPER BONUS, DON'T START ANY SOUNDS!
	BMI 15$
	LDA Z,POINT
	BNE 15$
	LDA SCOLFG		;C  PRIORITIZE SOUNDS
	BEQ 3$
	LDA I,DISINT
	BNE 11$
3$:	LDA OBJCOL
	BEQ 6$
	LDA I,BLKSND
	BNE 11$
6$:	BIT SAUCER
	BPL 15$
	LDA I,SAUSND
11$:	JSR SNDON
15$:	LDA EXPCNT		;D  IF NOT EXPLOSION
	BEQ 17$
	DEC EXPCNT		;D  IF EXPLOSION
	BNE 16$
	LDA I,0			;C  SHUT OFF EXPLOSION SOUND
	BEQ 17$			;B
16$:	LDA I,1			;C  TURN ON EXPLOSION SOUND
17$:	TAY
	LDA SXPCNT		;D  IF NOT SHELL FIRED
	BEQ 18$
	DEC SXPCNT
	BEQ 18$
	TYA
	ORA I,4			;C  TURN ON SHELL
	TAY
18$:	TYA
	ORA Z,SNDWRD
	BIT ATRACT		;D  IF ATTRACT MODE
	BPL 19$
	ORA I,0A0		;C  GAME - ENABLE SOUNDS AND RUMBLE
	JMP 56$
19$:	BIT GOVER		;D  IF ACCEPTING INITIALS
	BMI 54$
	LDA I,0			;	START WITH NOTHING
60$:	LDX $LMTIM		;D  IF NOT SLAM
	BEQ 65$
	ORA I,20		;C  SOUND THE ALARM
	LDX Z,POINT		;C  IF SOUND GOING
	BNE 65$
	PHA
	LDA I,DISINT
	JSR SNDON
	PLA
65$:	PHA
	LDA $CMODE		;D  IF FREE PLAY
	AND I,3
	BEQ 68$
	LDA $$CRDT		;D  IF NO MONEY
	BEQ 55$
68$:	LDA FRAME		;C  FLASH BUTTON
	LSR
	LSR
	PLA
	BCC 70$
	ORA I,40
70$:	STA POTGO
	STA SOUND		;C  TURN OFF SOUNDS
	LDA ALLPOT		;D  IF NOT START
	AND I,START
	BEQ 40$
	LDA I,-1
	STA NOR2D3
	STA ATRACT
	LDA $$CRDT
	SEC
	SBC TRAP1
	STA $$CRDT
	LDA I,0
	STA SKCTL
	STA $BCCNT		;C  RESET BONUS ADDER
	STA LOGO
	STA SOUND		;TURN OFF LICONS
	STA HITS
	STA HITS+1
	STA HITS+3
	STA HITS+2
	STA ACTION
	STA FIRECT+2
	STA GOVER
	STA TIMOUT
	STA SCOLFG
	STA SAUCER
	STA TANGLE
	STA TPOSX+1
	STA TPOSY+1
	LDA I,7			;C  RE-INIT POKEY
	STA SKCTL
	JSR ROBCHK
	CLC
	LDA OPTION
	AND I,3
	ADC I,2
	STA LIVES
	BPL 40$			;B
54$:	ORA I,60		;C  TURN OFF RUMBLE ONLY
	BNE 56$			;B
55$:	PLA			;C  RETRIEVE SOUND VALUE
	ORA I,40		;C  TURN OFF LICONS
56$:	STA SOUND
40$:	DEC VTIMER
	BNE 20$
	STA VSTOP
	LDA BUFRDY		;S  IF BUFFER NOT COMPLETE
	BNE 30$
	LDA VECRAM+1		;C  SWITCH BUFFERS
	EOR I,4
	STA VECRAM+1
	AND I,4
	BNE 25$			;D  IF LOWER BUFFER AVAILABLE
	LDA I,VECRAM/100+8	;C  USE UPPER BUFFER
	BNE 26$
25$:	LDA I,VECRAM/100	;C  USE LOWER BUFFER
26$:	STA BUFRDY
30$:	STA GOADD		;C  START UP VECTOR GENERATOR FOR 24 MS.
	LDA I,6
	STA VTIMER
20$:	PLA			;L  RESTORE REGISTERS
	TAY
	PLA
	TAX
	PLA
	RTI

	.INCLUDE TC65		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.SBTTL DRAW MOUNTAIN SCAPE
;BLOCK NAME:	MOUNTS
;DESCRIPTION:	DOES A LABS TO CORRECT PLACE TO START FOR MOUNTAINS.
;		SETS UP JSRL TO MOUNTAINS ROUTINE IN ROM
;
;SUBROUTINES:	VGLABS,VGJSRL
;REGISTERS:	A,X,Y
MOUNTS:	LDX I,0		;LDA VIEW FOR 1 BIT RESOLUTION
	STX XCOMP+3
	STX XCOMP+2
	LDA LANGLE
	STA XCOMP
	LDA TANGLE		;X=ANGLE (9 BITS)
	LSR			;THIS MEANS IT WRAPS AROUND EVERY 360 DEGRS
	ROR XCOMP
	LSR
	ROR XCOMP
	LSR
	ROR XCOMP
	LSR
	ROR XCOMP
	PHA
	AND I,01
	ORA I,02		;512 TO 1023 RANGE
	STA XCOMP+1
	LDA BOUNCE		;C  PROVIDE BOUNCE
	LSR
	LSR
	LSR
	LSR
	BEQ 20$
	STA TEMP1
	SEC
	LDA XCOMP+2
	SBC TEMP1
	STA XCOMP+2
	LDA I,-1
	STA XCOMP+3
20$:	JSR VGCNTR		;CENTER BEAM
	JSR VGVTR2		;POSITION BEAM
	LAH HORIZN
	LXL HORIZN
	JSR VGJSRL		;ADD HORIZON LINE
	PLA
	EOR I,0F
	JSR 50$			;DRAW 3/2 FULL SCREEN
	JSR 50$			;TO INSURE FULL VIEW
	JSR 50$
	LDA LANGLE		;SET UP FOR SIFT
	STA XCOMP
	LDA TANGLE		;D IF VOLCANO NOT ON SCREEN
	CMP I,88
	BCS 21$
	CMP I,39
	BCS 22$
21$:	RTS
22$:	LSR			;C DUBLE SIFT 4 TO SCALE
	ROR XCOMP
	LSR
	ROR XCOMP
	LSR
	ROR XCOMP
	LSR
	ROR XCOMP
	STA XCOMP+1
	LDA XCOMP
	SEC
	SBC I,5
	STA XCOMP
	LDA XCOMP+1
	SBC I,6
	STA XCOMP+1
	CLC
	LDA I,5E
	ADC XCOMP+2
	STA XCOMP+2
	BCC 25$
	INC XCOMP+3
25$:	JSR VGCNTR		;C MOVE BEAM TO TOP OF VOLCANO
	JSR VGVTR2
	LDA I,0
	STA CURNTX
	STA CURNTX+1
	STA CURNTY
	STA CURNTY+1
	LDX I,NOROCK-1
30$:	LDA AX,OBJTIM		;D IF NOT ACTIVE
	BEQ 40$
	LDA AX,XPOSL		;C DELTA X
	SEC
	TAY
	SBC CURNTX
	STA XCOMP
	STY CURNTX
	LDA AX,XPOSH
	TAY
	SBC CURNTX+1
	STA XCOMP+1
	STY CURNTX+1
	SEC			;C DELTA Y
	LDA AX,YPOSL
	TAY
	SBC CURNTY
	STA XCOMP+2
	STY CURNTY
	LDA AX,YPOSH
	TAY
	SBC CURNTY+1
	STA XCOMP+3
	STY CURNTY+1
	LDA I,0			;C VECTOR TO POINT
	STA VGBRIT
	STX TEMP1
	JSR VGVTR2
	LDX TEMP1
	LDA AX,OBJTIM
	ASL
	ASL
	ASL
	AND I,0E0
	JSR VGDOT
	LDX TEMP1
40$:	DEX
	BPL	30$
45$:	RTS
50$:	AND I,0E
	TAY
	LDA AY,MTNS
	INY
	LDX AY,MTNS
	INY
	STY TEMP1
	JSR VGADD2		;DRAW MOUNTAINS
	LDA TEMP1
	RTS
	.PAGE
	.PAGE
	.SBTTL	VOLCAO ROCK MOVEMENT
;
;CALLED ONCE A FRAME.
;WILL MOVE UP TO 5 ROLMS AT A TIME.
;XPOS(2 BYTES) & YPOS(2 BYTES) ARE RELATIVE TO N&E VOLCAO TOP
;
;PAGE 0=	OBJTM(5 BYTES), XSPD(5 BYTES, YSPD(5 BYTES)
;		XPOS(10 BYTES, YPOS(10 BYTES)
;
;CLOBBERS=A,X,Y
;NO STALK
;(THIS ROUTINE MAY BE BLAMED ON RUWEN OBIN)

VOLCNO:	LDX I,NOROCK-1		;5 ROCKS
10$:	LDA X,OBJTIM		;THIS ROCK ACTIVE?
	BNE	30$		;YES
	LDA PRAND		;NOT ACTIVE, SHOULD WE START ONE?
	AND I,7			;(THIS # MAY CHANGE)
	BNE 50$			;DON'T START THIS TIME
	LDA I,1F		;ROCK ACTIVE TIME
	STA X,OBJTIM
	LDA PRAND
	AND I,3
	ADC I,1			;SOME RANDOM HORIZ POSITION
	BIT PRAND		;LEFT OR RIGHT
	BVC 11$
	EOR I,0FF		;CHANGE HORIZ SPEED(+-1)
11$:	STA X,XSPD
	LDA PRAND
	AND I,7
	ADC I,5			;SOME RANDOM VERT VELOCITY
	STA X,YSPD
12$:	LDA I,0
	STA X,XPOSL
	STA X,XPOSH
	STA X,YPOSL
	STA X,YPOSH
	BEQ 50$			;ALWAYS
30$:	DEC X,OBJTIM
	BEQ 12$
	DEC X,YSPD		;GRAVITY TAMES HOLD
	LDY I,0			;MOVE ROCKS
	CLC
	LDA X,YSPD
	BPL 31$
	DEY			;A MINUS #, SIGN EXTEND
31$:	ADC X,YPOSL
	STA X,YPOSL
	LDA X,YPOSH
	BPL	33$
	LDA X,YPOSL		;LOW ENOUGH
	CMP I,0A2
	BCS 33$
	LDA I,0
	STA X,OBJTIM
	BEQ 12$			;ALWAYS
33$:	TYA			;GET MSB
	ADC X,YPOSH
	STA X,YPOSH
	LDY I,0			; MSB 0(GUESS)
	CLC
	LDA X,XSPD
	BPL 32$
	DEY			;AS ABOVE, BUT FOR X
32$:	ADC X,XPOSL
	STA X,XPOSL
	TYA
	ADC X,XPOSH
	STA X,XPOSH		;DONE MOVED THEM!
50$:	DEX
	BMI 55$
	JMP 10$
55$:	RTS
	.SBTTL TRANSLATE & ROTATE
;
;BLOCK NAME:	ROTATE
;DESCRIPTION:	ROTATE WILL SCAN THE PLAYFIELD TABLE FOR OBJECT AND
;		TRANSLATE AND ROTATE THE CENTER POINT OF EACH OBJECT
;		FOUND AND THEN DETERMINE IF IT WILL BE IN THE FIELD
;		OF VIEW.  IF SO, THE OBJECT WILL THEN BE MOVED TO A
;		NEW TABLE, THE OBJECTS IN WHICH WILL BE PROJECTED.
;INPUT PARAMS:	PLAYFIELD TABLES (ROM)
;OUTPUT PARAMS:	TRANSLATED & ROTATED PLAYFIELD TABLES (RAM) OF ONLY
;		THOSE OBJECTS IN FIELD OF VIEW
;SUBROUTINES:	ROTPNT,EXPLDE
;REGISTERS:	A,X,Y
;
ROTATE:	LDY I,0
	LDA Z,TPOSX
	STA TPOSXT
	LDA Z,TPOSX+1
	STA TPOSXT+1
	LDA Z,TPOSY
	STA TPOSYT
	LDA Z,TPOSY+1
	STA TPOSYT+1	
	LDA Z,LANGLE		;C  GET ANGLE DIVISIONS
	CLC
	ROL
	ROL
	LDX TANGLE
	JSR SINXTR
	EOR I,0FF
	ADC I,1
	STA BSIN
	TXA
	EOR I,0FF
	ADC I,0
	STA BSIN+1
	LDA GARBAG		;	THIS IS CHEATING
	LDX TANGLE
	JSR COSXTR
	STA ACOS
	STX ACOS+1
	BIT LOGO		;D  IF DISPLAYING LOGL
	BPL 33$
	LDX I,0
	JMP R10$
33$:	LDA Z,COLFLG+2		;D  IF IN COLLISION & FLASHING
	BEQ 1$
	JSR EXPLDE
30$:	JMP R4$
1$:	LDA Z,TANGLE+2		;C  SET UP ORIENTATION
	STA PTBLO2+1
	LDA I,16
	BIT R2D3FL
	BMI 3$
	LDX I,21
	JSR TR7CHK
	BCS 15$
	LDX I,2
15$:	TXA
3$:	STA PTBLO2
	LDA Z,TPOSX+2
	STA XMATRX
	LDA Z,TPOSX+3
	STA XMATRX+1
	LDA Z,TPOSY+2
	STA YMATRX
	LDA Z,TPOSY+3
	STA YSTRT1
	JSR ROTPNT		;C  ROTATE & SELECT
	TYA			;D  IF TANK NOT IN VIEW
	BEQ 30$
	LDA PTBLO2+1		;C  SET UP ORIENTATION OF TREADS
	STA AY,PTBLO2+1
	LDA PTBLX2		;C  SETUP CENTER POINTS
	STA AY,PTBLX2
	LDA PTBLX2+1
	STA AY,PTBLX2+1
	LDA PTBLY2
	STA AY,PTBLY2
	LDA PTBLY2+1
	STA AY,PTBLY2+1
	BIT R2D3FL		;D  IF TANK, NOT R2D3
	BPL 6$
	LDA TRDCTR+2		;C  DETERMINE EGGZAWST PICTURE
	AND I,7
	CLC
	ADC I,24
	BNE 4$			;B
6$:	JSR TR7CHK 		;D  IF TR7
	BCS R4$
	LDA PTBLO2+1		;C  DETERMINE IF WE SEE FRONT OR BACK
	SEC
	SBC TANGLE
	CLC
	ADC I,40		;	90 DEGREES
	ASL
	LDA I,4
	BCC 2$
	ASL
2$:	STA TEMP1		;C  COMPUTE OBJECT #
	LDA Z,TRDCTR+2
	AND I,3
	CLC
	ADC TEMP1
4$:	STA AY,PTBLO2
	INY
	INY
	BIT R2D3FL
	BMI R4$
	LDA I,0D		;C  OUTPUT RADAR ANT.
	STA AY,PTBLO2
	LDA RANGLE
	STA AY,PTBLO2+1		;C  ORIENTATION
	LDA TANGLE		;C  COMPUTE RELATIVE ORIENTATION
	SEC
	SBC TANGLE+2
	STA NTHETA
	JSR COS			;C  COMPUTE CENTER OF RADAR
	TXA
	LDX I,-1
	EOR I,0FF
	BMI 5$
	INX
5$:	CLC
	ADC I,1
	BCC 10$
	INX
10$:	ASL
	PHA
	TXA
	ROL
	TAX
	PLA
11$:	CLC
	ADC PTBLX2
	STA AY,PTBLX2
	TXA
	ADC PTBLX2+1
	STA AY,PTBLX2+1
	LDA NTHETA
	JSR SIN
	TXA
	ASL
	LDX I,0
	BCC 21$
	LDX I,-1
21$:	CLC
	ADC PTBLY2
	STA AY,PTBLY2
	TXA
	ADC PTBLY2+1
	STA AY,PTBLY2+1
	INY
	INY
R4$:	LDX I,2
R5$:	LDA ZX,FIRECT		;D  IF SHELL NOT FIRED
	BEQ R8$
	LDA ZX,TANGLE		;C  SET UP ANGLE
	STA AY,PTBLO2+1
	LDA I,3			;C  SET UP OBJ #
	STA AY,PTBLO2
5$:	LDA ZX,FIRECT		;D  IF NOT EXPLODING
	BPL R6$
				;C  FIRECT=FIRECT
	CLC
	ADC I,0F
	BMI 10$
	LDA I,0			;C  END EXPLOSION
	STA ZX,FIRECT
	BEQ R8$			;B
10$:	STA ZX,FIRECT
	EOR I,0FF
	CLC
	ADC AY,PTBLX2+1
	STA AY,PTBLO2+1
	LDA I,0E
	STA AY,PTBLO2
R6$:	LDA ZX,SHELLX
	STA XMATRX
	LDA ZX,SHELLX+1
	STA XMATRX+1
	LDA ZX,SHELLY
	STA YMATRX
	LDA ZX,SHELLY+1
	STA YSTRT1
	JSR ROTPNT		;C  ROTATE & SELECT
R8$:	DEX
	DEX
	BPL R5$
	LDA SAUCER		;D  IF NOT SAUCER
	BEQ 40$
	LDA I,20		;C  ROTATE & SELECT
	STA AY,PTBLO2
	LDA SCANGL
	STA AY,PTBLO2+1
	LDA SAPOSX
	STA XMATRX
	LDA SAPOSX+1
	STA XMATRX+1
	LDA SAPOSY
	STA YMATRX
	LDA SAPOSY+1
	STA YSTRT1
	JSR ROTPNT
	LDA AY,PTBLO2-2		;D  IF SAUCER NOT IN VIEW
	CMP I,20
	BNE 20$
	LDA I,81		;C  SET UP SOUND
	STA SAUCER
	BNE 40$
20$:	LDA I,1			;C  TURN OFF SOUND
	STA SAUCER
40$:	LDX I,0
R10$:	LDA AX,PTBLO1		;D  IF END OF TABLE
	BMI ROTUND
	STA AY,PTBLO2		;C  MOVE OBJECT # TO TABLE
	LDA AX,PTBLO1+1		;C  MOVE ORENTATION TO TABLE
	STA AY,PTBLO2+1
	LDA AX,PTBLX1
	STA XMATRX
	LDA AX,PTBLX1+1
	STA XMATRX+1
	LDA AX,PTBLY1
	STA YMATRX
	LDA AX,PTBLY1+1
	STA YSTRT1
	JSR ROTPNT		;C  ROTATE & SELECT
	INX			;	NEXT TABLE LOCATION
	INX
	BNE R10$
ROTUND:	STA AY,PTBLO2		;C  INDICATE END OF TBL
	RTS
;
;ROTPNT	- CHECK VALUES PASSED IN X1 & Y1 USING PNTROT.  PUT IN TABLE IF
;	  IN VIEW Y=INDEX TO RAM TABLE
;
ROTPNT:	JSR WAIT		;C  READ MATH BOX
	ASL
	STA X2
	LDA MOUTHI
	STA RSTRT1
	BMI 20$
	ROL
	BMI 20$			;D  IF TOO FAR THROW OUT
	STA X2+1
	LSR			;D  IF TOO CLOSE, THROW OUT
	LSR
	BEQ 20$
	LDA X2+1
	CMP I,7B		;D  IF TOO FAR, THROW OUT
	BCS 20$
	JSR WAIT		;C  READ MATH BOX
	ASL
	STA Y2
	LDA MOUTHI
	ROL
	STA Y2+1
	LDA Y2			;C  ABSOLUTE VALUE OF Y
	BIT Y2+1		;	IF POS, BRANCH
	BPL 10$
	CLC
	EOR I,0FF
	ADC I,1
10$:	STA Y1
	LDA Y2+1
	BPL 15$
	EOR I,0FF
	ADC I,0
15$:	STA Y1+1
	LDA Y1			;D  IF Y >= X
	CMP X2
	LDA Y1+1
	SBC X2+1
	BCS 20$
	LDA X2			;C  MOVE TABLE VALUE TO RAM
	STA AY,PTBLX2
	LDA X2+1
	STA AY,PTBLX2+1
	LDA Y2
	STA AY,PTBLY2
	LDA Y2+1
	STA AY,PTBLY2+1
	INY
	INY
20$:	RTS
;
;WAIT:	WAIT FOR 2901 MATH BOX & RETURN
;	LOW BYTE IN A
;
WAIT:	BIT MSTAT		;D  DO WHILE NOT DONE
	BMI WAIT
	LDA MOUTLO
	RTS
	.PAGE
	.SBTTL EXECUTE EXPLOSION SEQUENCE

;BLOCK NAME:	EXPLDE
;DESCRIPTION:	UPDATES EXPLOSION PIECES, POSITIONS AND ANGLES
;		ROTATE & TRANSLATES THEIR CENTER POINTS
;		RESETS COLLISION FLAG AT TERMINATION OF EXPLOSION SEQUENCE
;INPUT PARAMS:	EXPOSX,EXPOSY,ZVELOC,EXPTBX,EXPOSO,EXPOSZ
;OUTPUT PARAMS:	EXPOSX,EXPOSY,ZVELOC,EXPOSO,EXPOSZ,PTBLX2,PTBLY2,PTBLO2,(Y)
;REGISTER:	A,X,Y
;SUBROUTINES:	ROTPNT
;

EXPLDE:	LDX I,10.		;C  UPDATE X,Y,Z POSITIONS
1$:	LDA AX,EXPOSZ+1
	CLC
	BPL 2$
	JMP 30$
2$:	LDA AX,EXPOSX
	ADC AX,EXPTBX
	STA AX,EXPOSX
	STA XMATRX
	LDA AX,EXPOSX+1
	ADC AX,EXPTBX+1
	STA AX,EXPOSX+1
	STA XMATRX+1
	CLC			;	Y
	LDA AX,EXPOSY
	ADC AX,EXPTBY
	STA AX,EXPOSY
	STA YMATRX
	LDA AX,EXPOSY+1
	ADC AX,EXPTBY+1
	STA AX,EXPOSY+1
	LDA AX,ZVELOC
	STA TEMP1
	BMI 5$
	LDA I,0
5$:	BEQ 6$
	LDA I,0FF
6$:	ASL TEMP1
	ROL
	ASL TEMP1
	ROL
	STA TEMP1+1
	LDA AX,EXPOSZ		;	Z
	CLC
	ADC TEMP1
	STA AX,EXPOSZ
	LDA TEMP1+1
	ADC AX,EXPOSZ+1
	STA AX,EXPOSZ+1
	LDA AX,ZVELOC		;D  IF ZVELOC MAXED OUT
	BPL 8$
	CMP I,80-GRAVTY+1
	BCC 10$
8$:	ADC I,GRAVTY		;C  UPDATE ZVELOC
	STA AX,ZVELOC
10$:	TXA			;C  UPDATE ORIENTATION
	LSR
	LSR
	PHP
	TXA
	ASL
	ASL
	ADC I,3
	PLP
	BCC 20$
	STA TEMP1		;	DECREMENT
	LDA AX,EXPOSO
	SBC TEMP1
	JMP 25$
20$:	ADC AX,EXPOSO
25$:	STA AX,EXPOSO
	STA AY,PTBLO2+1		;C  SET UP FOR TABLE USE
	TXA
	LSR			;C  DEVELOP OBJECT #
	CLC
	ADC I,10
	BIT R2D3FL		;D  IF TANK
	BPL 26$			;C  DIFFERENT
	ADC I,8			;	FOR R2D3
	BNE 28$			;B
26$:	CMP I,13		;D  IF NOT RADAR
	BNE 28$
	STA TEMP1
	JSR TR7CHK
	BCC 27$
	INC TEMP1
27$:	LDA TEMP1
28$:	STA AY,PTBLO2
	LDA AX,EXPOSY+1		;C  START MATRIX MULTIPLY
	STA YSTRT1
	JSR ROTPNT		;C  ROTATE & SELECT
30$:	DEX
	DEX
	BMI 34$
	JMP 1$
34$:	LDX I,10.		;D  IF EXPLOSION NOT OVER
35$:	LDA AX,EXPOSZ+1
	BPL 40$
	DEX
	DEX
	BPL 35$
	LDA I,0			;C  RESET COLLISION FLAG
	STA COLFLG+2
	TYA
	PHA
	JSR ROBCHK		;C  RESET ROBOT POSITION
	PLA
	TAY
40$:	RTS
CHKS3:	.BYTE 5E
	.PAGE
	.SBTTL DRAW OBJECT
;
;BLOCK NAME:	DRAW
;DESCRIPTION:	DRAW WILL BUILD VECTOR LIST FOR ANY OBJECT FROM VALUES
;		IN TABLES PNTTBL AND OBJTBL
;INPUT PARAMS:	A=OBJECT # ,SAVE0=OBJECT, # POINTER
;OUTPUT PARAMS:	NONE
;SUBROUTINES:	VGHALT,VGWAIT,VGLABS,VGVCTR,NEWCUR
;REGISTERS:	A,X,Y
;
DRAW:	ASL			;C  BUILD INDEX TO OBJ TBL
	TAY
	LDA AY,OBJTBL		;C  GET POINTER TO OBJ IN MEM
	STA TBLPTR
	LDA AY,OBJTBL+1
	STA TBLPTR+1
D.TOP:	LDY I,0			;D  IF NOT DONE
	LDA NY,TBLPTR		;	(VALUE FROM TABLE)
	CMP I,0FF
	BNE 11$
	RTS
11$:	TAX			;C  DO COMPUTED GO TO
	AND I,0F8		;	(SAVE INDEX OR VALUE)
	STA TEMP1
	TXA
	AND I,7
	ASL
	TAX
	LDA AX,DTAB+1
	PHA
	LDA AX,DTAB
	PHA
	RTS
DTAB:	.WORD D.DOT-1,D.SBRT-1,D.BVCT-1,D.LABS-1
	.WORD D.VCTR-1,D.SPCL-1,D.SLIM-1
D.DOT:	LDA I,0			;C  DRAW BLANK VECTOR TO POINT
	JSR DOVECT
	LDA I,20		;C  DRAW DOT AT CURRENT INTENSITY
	JSR VGDOT
	JMP D.NEXT		;B
	
D.SBRT:	LDX SAVE0		;D  IF NOT SAUCER
	LDA AX,PTBLO2
	CMP I,17		;D  IF LOGO
	BEQ 5$
	CMP I,1E
	BEQ 5$
	CMP I,1F
	BEQ 5$
	CMP I,20		;D  IF NOT SAUCER
	BNE 10$
	LDA SCOLFG		;D  IF NOT IN COLLISION
	BEQ 10$
5$:	LDA SINT
	JMP 15$
10$:	LDA TEMP1		;C  GET BRITNESS
	SEC
	SBC DQUE
	BCC 12$
	CMP I,30
	BCS 15$
12$:	LDA I,30
15$:	TAY			;C  SET BRITNESS REGISTER
	LDA I,4			;NO CLIPPING WINDOW
	JSR VGSTAT
	JMP D.NEXT
D.LABS:	LDA I,0			;C  RESET CURRENT X&Y
	STA CURNTX
	STA CURNTX+1
	STA CURNTY
	STA CURNTY+1
	JSR VGCNTR		;C  MOVE BEAM
D.BVCT:	LDA I,0			;C  DRAW BLANK VECTOR
	BEQ D.VCT1		;B
D.VCTR:	LDA I,20		;C  DRAW AT CURRENT BRITHNESS
D.VCT1:	JSR DOVECT
	JMP D.NEXT		;B
D.SPCL:	LDX SAVE0		;C  SPECIAL COUNTER
	LDA AX,PTBLO2+1
	TAX			;C  SET UP SCALING
	AND I,3F
	ASL
	TAY			;LINEAR
	TXA
	AND I,0C0
	ASL
	ROL
	ROL
	ADC I,1			;POWER OF 2
	JSR VGSCAL		;C  SET SCALE FACTOR
	LXL EXPIC		;C  OUTPUT EXPLOSION PICTURE
	LAH EXPIC
	JSR VGJSRL
	LDA I,1			;C  RESET SCALE
	JSR VGSCA1
D.SLIM:	JMP D.NEXT		;B
DOVECT:	STA VGBRIT		;C  SET BRITNESS
	LDA TEMP1		;C  GET INDEX
	LSR
	TAX
	LDA ZX,PNTTBL		;C  COMPUTE DELTA
	TAY
	SEC
	SBC CURNTX
	STA XCOMP
	STY CURNTX		;   SAVE NEW CURRENT
	LDA ZX,PNTTBL+1
	TAY
	SBC CURNTX+1
	STA XCOMP+1
	STY CURNTX+1
	SEC			;C  COMPUTE DELTA Y
	LDA ZX,PNTTBL+2
	TAY
	SBC CURNTY
	STA XCOMP+2
	STY CURNTY		;  SAVE NEW CURRENT
	LDA ZX,PNTTBL+3
	TAY
	SBC CURNTY+1
	STA XCOMP+3
	STY CURNTY+1
	JSR VGVTR2		;C  ADD VCTR TO VGLIST
	RTS
D.NEXT:	INC TBLPTR		;C  GET NEXT COMMAND
	BNE 10$
	INC TBLPTR+1
10$:	JMP D.TOP
	.PAGE
	.SBTTL PUT PROJECTED POINTS IN TABLE
;BLOCK NAME:	PNTPUT
;DESCRIPTION:	THIS ROUTINE WILL GENERATE THE POINTS USED TO DRAW AN
;		OBJECT AND MOVE THEM TO THE POINT TABLE.
;INPUT PARAMS:	THETA=ANGLE OF VIEW
;		X=POINTER TO CENTER POINT OF OBJECT
;OUTPUT PARAMS:	POINT TABLE (PNTTBL),TBLPTR,NOPNTS
;SUBROUTINES:	PNTROT,PROJPT,DIVIDE,KLUDGE
;REGISTERS:	A,X,Y

PNTPUT:	STX SAVE1		;C  SAVE INDEX
	LDA TANGLE		;C  COMPUTE RELATIVE ORIENTATION
	SEC
	SBC AX,PTBLO2+1
	EOR I,80
	STA NTHETA
	JSR SIN
	STA BSIN
	STX BSIN+1
	LDA NTHETA
	JSR COS
	CLC
	EOR I,0FF
	ADC I,1
	STA ACOS
	TXA
	EOR I,0FF
	ADC I,0
	STA ACOS+1
	LDX SAVE1
	LDA AX,PTBLO2		;C  SET UP TABLE POINTER
	ASL
	TAY
	LDA AY,OBJPNT
	STA TBLPTR
	LDA AY,OBJPNT+1
	STA TBLPTR+1
	LDA AX,PTBLX2
	STA TPOSXT
	LDA AX,PTBLX2+1
	STA TPOSXT+1
	AND I,0F0
	STA DQUE
	LDA AX,PTBLY2
	STA TPOSYT
	LDA AX,PTBLY2+1
	STA TPOSYT+1
	LDX I,0			;C  INITIALIZE INDICES
	STX ZLOW
	STX ZHI
	STX SAVE3		;	OBJECT POINT TABLE
	INC SAVE3
10$:	LDY SAVE3		;C  SET UP DELTA X
	LDA NY,TBLPTR
	STA XMATRX
	INY
	LDA NY,TBLPTR
	STA XMATRX+1
	INY			;C  SET UP DELTA Y
	LDA NY,TBLPTR
	STA YMATRX
	INY
	LDA NY,TBLPTR
	STA YSTRT2
	INY
	JSR WAIT
	CLC
	EOR I,0FF
	ADC I,1
	STA ZX,PNTTBL		;C  MOVE X COORD TO TABLE
	LDA MOUTHI
	EOR I,0FF
	ADC I,0
	STA ZX,PNTTBL+1
	LDA NY,TBLPTR
	STA DDEND
	INY
	LDA NY,TBLPTR
	INY
	STY SAVE3
	STA DDEND+1
	STX SAVE2
	JSR KLUDGE
	JSR WAIT
	LDX SAVE2
	STA ZX,PNTTBL+2
	LDA MOUTHI
	STA ZX,PNTTBL+3
	TYA
	LDY I,0
	CMP NY,TBLPTR
	BCS 20$
	INX
	INX
	INX
	INX
	BNE 10$			;B
20$:	RTS
	.PAGE
	.PAGE
	.SBTTL KLUDGE MOVEMENT IN Z-AXIS

;BLOCK NAME:	KLUDGE
;DESCRIPTION:	WILL ADD APPROPRIATE Z OFFSET FOR EXPLOSION OBJECTS
;INPUT PARAMS:	DDEND,PTBLO2,EXPOSZ
;OUTPUT PARAMS:	DDEND
;REGISTERS:	A,X

KLUDGE:	LDX SAVE1		;D  IF NOT EXPLOSION OBJECT
	LDA AX,PTBLO2
	AND I,10
	BEQ 20$
	LDA AX,PTBLO2		;C  CONVERT TO EXPLOSION PIECE #
	AND I,7
10$:	ASL
	TAX
	LDA AX,EXPOSZ		;C  ADD IN Z OFFSET
	ADC DDEND
	STA DDEND
	LDA AX,EXPOSZ+1
	ADC DDEND+1
	STA DDEND+1
20$:	LDA BOUNCE
	BEQ 30$
	SEC
	LDA DDEND
	SBC BOUNCE
	STA DIVOUT
	LDA DDEND+1
	SBC I,0
	JMP 40$
30$:	LDA DDEND
	STA DIVOUT
	LDA DDEND+1
40$:	STA DIVOUT+1
	STA ZDIV		;C  START DIVIDE
	RTS
	.PAGE
	.SBTTL BOUNCE CONTROL
;
;BLOCK NAME:	BOUND
;DESCRIPTION:	THIS ROUTINE WILL CONTROL BOUNCE
;INPUT PARAMS:	BOUNCE,BCOUNT
;OUTPUT PARAMS:	BOUNCE,BCOUNT
;REGISTERS:	A
;
BOUND:	LDA BOUNCE		;D  IF NO BOUNCE
	BEQ 20$
	LSR BOUNCE		;C  LOWER BOUNCE
20$:	RTS
	.PAGE
	.SBTTL SIN-COS ROUTINES
;BLOCK NAME:	COS
;DESCRIPTION:	SIN & COS WILL ACCEPT 8 BITS OF ANGLE & RETURN 16 BITS OF
;		SIN OR COS IN REGISTERS A & X (A IS LOW ORDER)
;INPUT PARAMS:	(A)=ANGLE (0 TO FF REPRESENTS 0 TO 360 DEGREES)
;		(CC)=MINUS/PLUS FLAG SET CORRECTLY
;OUTPUT PARAMS:	(A)=LOW ORDER BYTE OF SIN/COS
;		(X)=HIGH	"	"
;REGISTERS USED:A,X
;
COS:	CLC			;C  COS(A)=SIN(A+PI/2)
	ADC I,40
SIN:	BPL SIN1		;D  IF PI>ANGLE>-0
	AND I,7F
	JSR SIN1		;C  SIN(A) WHEN PI>A>=0
	EOR I,0FF
	CLC
	ADC I,1
	PHA
	TXA
	EOR I,0FF
	ADC I,0
	TAX
	PLA
	RTS
SIN1:	CMP I,41		;D  IF PI/2 >-ANGLE >-0
	BCC 10$
	EOR I,7F		;C  SIN(PI/2+A)=SIN(PI/2-A)
	ADC I,0
10$:	ASL
	TAX
	LDA AX,99$		;	LOW ORDER
	PHA
	LDA AX,99$+1		;	HIGH ORDER
	TAX
	PLA
	RTS
99$:	.WORD 0,324,647,96A
	.WORD 0C8B,0FAB,12C8,15E2
	.WORD 18F8,1C0B,1F19,2223
	.WORD 2528,2826,2B1F,2E11
	.WORD 30FB,33DE,36BE,398C
	.WORD 3C56,3F17,41CE,447A
	.WORD 471C,49B4,4C3F,4EBF
	.WORD 5133,539B,55F5,5842
	.WORD 5A82,5CB4,5ED7,60EC
	.WORD 62F2,64EB,66CF,68A6
	.WORD 6A6D,6C24,6DC4,6F5F
	.WORD 70E2,7255,73B5,7504
	.WORD 7641,776C,7884,798A
	.WORD 7A7D,7B5D,7C2A,7CE3
	.WORD 7D8A,7E1D,7E9D,7F09
	.WORD 7F62,7FA7,7FD8,7FF6
	.WORD 7FFF
	.PAGE
	.SBTTL EXTRAPOLATE SIN & COS
;BLOCK NAME:	COSXTR
;DESCRIPTION:	WILL EXTRAPOLATE SIN & COS TO AN EXTRA 2 DIVISIONS
;		BETWEEN EACH ANGLE
;INPUT PARAMS:	(X)=ANGLE
;		(A)=DIVISION OF ANGLE (0 TO 1)
;OUTPUT PARAMS:	(A)=LOW ORDER BYTE SIN/COS
;		(X)=HIGH	"	"
;		GARBAG
;REGS:		A,X
;
COSXTR:	AND I,1			;D  IF DIV D0
	STA GARBAG
	BNE 10$
	TXA			;C  GIVE 'EM COS
	JMP COS
10$:	TXA			;L  GET HI BYTE OF ANGLE
	STA TEMP3		;C  SAVE ANGLE
	JSR COS			;C  COS OF ANGLE
	STA TEMP1
	STX TEMP1+1
	INC TEMP3		;C  COS OF NEXT ANGLE
	LDA TEMP3
	JSR COS
	JMP XTRAP		;B
SINXTR:	AND I,1			;D  IF DIV>0
	STA GARBAG
	BNE 10$
	TXA			;C  GIVE 'EM SIN
	JMP SIN
10$:	TXA
	STA TEMP3
	JSR SIN			;C  SIN OF ANGLE
	STA TEMP1
	STX TEMP1+1
	INC TEMP3		;C  SIN OF NEXT ANGLE
	LDA TEMP3
	JSR SIN
XTRAP:	SEC			;C  COMPUTE DIFFERENCE
	SBC TEMP1
	STA TEMP2
	TXA
	SBC TEMP1+1
	CMP I,80		;C  DIVIDE BY 2
	ROR
	ROR TEMP2
	STA TEMP2+1
10$:	LDA TEMP1		;C  ADD IN DIFFERENCE CORRECTLY
	CLC
	ADC TEMP2
	PHA
	LDA TEMP1+1
	ADC TEMP2+1
	TAX			;L  GET VALUES IN REGS
	PLA
	RTS
	.PAGE
	.SBTTL QUICK ROBOT-SHELL COLLISION CHECK - QWIKCK
;
;	QWIKCK DOES A QUICK COLLISION CHECK FOR PLAYER'S
;	SHELL VS. ROBOT ONLY.
;
;	SHRTCK DOES THE SAME CHECK, BUT FOR EITHER PLAYER'S
;	SHELL VS. ROBOT, OR FOR ROBOT'S SHELL VS. PLAYER.
;	SHRTCK REQUIRES X AND Y TO BE SET UP PROPERLY.
;
;	CC - NO COLLISION
;	CS - CLLISION -- APPROPRIATE FLAGS & COUNTERS ARE SET
;
QWIKCK:	LDA FIRECT		;D  IF NO SHELL
	BMI 5$
	BNE 10$
5$:	JMP Q.20$
10$:	LDX I,0			;L SET UP FOR SHRTCK
	LDY I,2			;	FALL THROUGH

SHRTCK:	LDA ZX,SHELLX		;C  SET UP FOR DISTANCE
	STA ACOS
	LDA ZX,SHELLX+1
	STA ACOS+1
	LDA ZX,SHELLY
	STA BSIN
	LDA ZX,SHELLY+1
	STA BSIN+1
	LDA AY,COLFLG
	BNE 16$
	LDA AY,TPOSX		;C  GET PROXIMITY TO SHELL
	STA TPOSXT
	LDA AY,TPOSX+1
	STA TPOSXT+1
	LDA AY,TPOSY
	STA TPOSYT
	LDA AY,TPOSY+1
	STA DSTNCE
	CMP NX,0		;	WASTE TIME
	LDA NY,0
	LDA MOUTLO
	STA TEMP3
	LDA MOUTHI
	BMI 22$
	LSR
	ROR TEMP3
	LSR
16$:	BNE 22$
	ROR TEMP3
	BIT R2D3FL		;D  IF NOT R2D3
	BPL 17$
	LDA EXPOSZ+0C		;D  IF TOO HIGH UP
	CMP I,TOP&0FF
	LDA EXPOSZ+0D
	SBC I,TOP/100
	BCS 22$
17$:	LDA TANGLE
	SEC
	SBC TANGLE+2
	ASL
	BPL 30$
	EOR I,0FF
	CLC
	ADC I,1
30$:	LSR
	LSR
	BIT R2D3FL
	BMI 35$
	LSR
	BPL 36$
35$:	CLC
	ADC I,18
36$:	STA TEMP1
	LSR
	CLC
	ADC TEMP1
	ADC I,38
	STA TEMP1
	CMP TEMP3
	BCS 38$
22$:	JMP Q.20$
38$:	LDA I,20		;C  INDICATE COLLISION
	STA AY,COLFLG
	LDA I,0			;C  RESET TIMER
	STA TIMOUT
	TYA			;D  IF NOT PLAYER
	BNE 18$
	LDA I,2			;C  CRACK WINDSHIELD
	STA CRACK
	LDA I,-1
	STA BOUNCE
	DEC LIVES		;D  IF GAME NOT OVER
	BNE 18$
	INC GOVER		;C  INDICATE GAME OVER
18$:	LDA ZX,HITS		;C  SAVE CURRENT SCORE
	STA TEMP1
	LDA ZX,HITS+1
	STA TEMP1+1
	TXA			;D  IF ROBOT
	BNE 4$
	LDA I,2
	BIT R2D3FL		;D  IF NOT R2D3
	BMI 90$
	JSR TR7CHK		;D  IF TR7
	LDA I,3
	BCS 90$
4$:	LDA I,1			;C  ADD 1 OTHERWISE
90$:	CLC
	SED
	ADC ZX,HITS
	STA ZX,HITS
6$:	LDA ZX,HITS+1
	ADC I,0
	CLD
	STA ZX,HITS+1
	TXA			;D  IF ROBOT
	BNE 19$
	JSR NEWLIF		;C  GIVE-A-LIFE  --  SAVE-A-FRIEND
19$:	LDA I,80		;C  EXPLODE SHELL
	STA ZX,FIRECT
	LDA I,0FF		;C  BIG EXPLOSION IN TANK HIT
	STA AY,EXPCNT
	LDA I,LOX
	ORA AY,SNDWRD
	STA AY,SNDWRD
	LDA ZX,SNDWRD
	AND I,HIX
	STA ZX,SNDWRD
	JSR EXINIT
	LDA I,70		;C  SMALL EXPLOSION IN OTHER TANK
	STA ZX,EXPCNT
	SEC			;L  TELL THEM COLLISION
	RTS
Q.20$:	CLC			;L  TELL 'EM NO - NO - NO , NO-NO-NO-NO-NO!
	RTS
	.PAGE
	.SBTTL COLLISION CHECK

;BLOCK NAME:	COLCHK
;DESCRIPTION:	WILL CHECK FOR COLLISION BETWEEN SHELLS AND OBJECTS
;INPUT PARAMS:	SHELLX & SHELLY & TPOSX & TPOSY & PLAYFIELD TBL
;OUTPUT PARAMS:	FIRECT ZEROED ON COLLISION, COLFLG SET FOR TANK COLLISION,
;		EXPCNT SET FOR ALL EXPLOSIONS
;SUBROUTINES:	ABSTMP,EXINIT
;REGISTERS:	A,X,Y
;
COLCHK:	LDX I,2			;	START WITH 2ND SHELL
C.10$:	TXA			;C  INDEX TO OTHER TANK
	EOR I,2
	TAY
	LDA ZX,FIRECT		;D  IF NO SHELL FIRED
	BMI C.60$
	BEQ C.60$
15$:	LDA CRACK
	BNE 5$
	LDA GOVER
	BNE C.60$
5$:	JSR SHRTCK		;C  SETUP MATH BOX AND DO TANK-SHELL COLCHK
	BCS C.60$			;D  IF COLLISION
	JMP SAUCHK
C.21$:	LDY I,0
21$:	LDA AY,PTBLO1		;D  IF DONE
	BMI C.60$
	LDA AY,PTBLX1		;C  GET PROXIMITY TO OBJECT
	STA TPOSXT
	LDA AY,PTBLX1+1
	STA TPOSXT+1
	LDA AY,PTBLY1
	STA TPOSYT
	LDA AY,PTBLY1+1
	STA DSTNCE
	CMP NX,0		;	WASTE TIME
	LDA MOUTLO
	STA TEMP3
	LDA MOUTHI
	CMP I,80
	ROR
	ROR TEMP3
	CMP I,80
	ROR
	ROR TEMP3
	CMP I,0			;D  IF TOO FAR
	BNE 40$
	STX GARBAG
	LDX AY,PTBLO1
	LDA AX,PRXTBL
	LDX GARBAG
	CMP TEMP3
	BCC 40$
	LDA I,0A0		;C  EXPLODE SHELL
	STA ZX,FIRECT
	LDA I,070		;C  TURN ON SOUND SHORT
	STA EXPCNT
	LDA SNDWRD
	AND I,HIX
	STA SNDWRD
	BCS C.60$
40$:	INY
	INY
	BNE 21$
C.60$:	DEX
	DEX
	BNE 61$
	JMP C.10$
61$:	RTS

SAUCHK:	LDA SAUCER
	BEQ 10$
	LDA SCOLFG
	BNE 10$
	LDA SAPOSX		;C  GET DISTANCE TO SAUCEX
	STA TPOSXT
	LDA SAPOSX+1
	STA TPOSXT+1
	LDA SAPOSY
	STA TPOSYT
	LDA SAPOSY+1
	STA TPOSYT+1
	STA DSTNCE
	CMP NX,0
	LDA MOUTLO
	STA TEMP3
	LDA MOUTHI
	CMP I,80
	ROR
	ROR TEMP3
	CMP I,80
	ROR
	ROR TEMP3
	CMP I,0			;D  IF TOO FAR
	BEQ 20$
10$:	JMP C.21$
20$:	LDA I,90
	CMP TEMP3
	BCC 10$
	LDA I,40		;C  INDICATE COLLISION
	STA SCOLFG
	LDA I,DISINT
	JSR SNDON
	LDA I,0A0		;C  EXPLODE SHELL
	STA ZX,FIRECT
	STA ZX,EXPCNT
	LDA I,LOX
	ORA AY,SNDWRD
	STA AY,SNDWRD
	TXA			;D  IF ROBOT BLEW IT UP
	BNE C.60$
	LDA HITS
	STA TEMP1
	LDA HITS+1
	STA TEMP1+1
	LDA I,5
	CLC
	SED
	ADC HITS
	STA HITS
30$:	LDA HITS+1
	ADC I,0
	CLD
	STA HITS+1
	JSR NEWLIF		;C  GEIV NEW LIFE
40$:	JMP C.60$
PRXTBL:	.BYTE 56.,88.
	.REPT 10.
	.BYTE 0
	.ENDR
	.BYTE 86.,0,0,0

	.SBTTL ABSOLUTE VALUE

;BLOCK NAME:	ABSTMP
;DESCRIPTION:	WILL RETURN ABSOLUTE VALUE OF TEMP1 IN TEMP1
;INPUT PARAMS:	TEMP1
;OUTPUT PARAMS:	TEMP1
;REGISTERS:	A
;
ABSTMP:	BIT TEMP1+1		;D  IF POSITIVE
	BPL 10$
	LDA TEMP1		;C  ABS VALUE
	CLC
	EOR I,0FF
	ADC I,1
	STA TEMP1
	LDA TEMP1+1		;	HIGH BYTE
	EOR I,0FF
	ADC I,0
	STA TEMP1+1
10$:	RTS
;
;
;	GIVE NEW LIFE TO PLAYER IF WARRANTED
;
;
;		USES (A) - TEMP1 MUST HAVE SCORE PRIOR TO
;		CURRENT INCREMENT
;
;
NEWLIF:	LDA OPTION		;C  GET BONUS LEVEL
	LSR
	LSR
	LSR
	LSR
	AND I,3
	TAX
	LDA AX,BONTBL
	BEQ 20$
	LDX HITS+1		;D  IF NOT IN PROPER RANGE
	BNE 40$
	CMP TEMP1
	BCC 20$
	CMP HITS
	BCS 20$
	INC LIVES
	LDA I,0			;C  MAKE SURE GAME NOT OVER
	STA GOVER
	LDA I,BONER		;C  ING THE BELL
10$:	JSR SNDON
20$:	LDX I,0
	RTS
40$:	LDA TEMP1+1		;D  IF NOT SUPER BONUS
	BNE 20$
	STA GOVER		;C  SUPER BONUS
	INC LIVES
	LDA I,-1
	STA SUPER
	LDA I,SUPBON
	BNE 10$			;B
	.PAGE
	.SBTTL EXPLOSION INITIALIZATION

;BLOCK NAME:	EXINIT
;DESCRIPTION:	INITIALIZES POSITIONS AND Z VELOCITIES OF TANK PIECES IF
;		ROBOT EXPLODED
;INPUT PARAMS:	(X)=2 MEANS PLAYER EXPLODED
;		(X)=0 MEANS ROBOT EXPLODED
;OUTPUT PARAMS:	EXPOSX,EXPOSY,ZVELOC,EXPOSO,EXPOSZ
;REGISTERS:	A,Y
;SUBROUTINES:	RAND

EXINIT:	TXA			;D  IF NOT ROBOT EXPLODED
	BNE 20$
1$:	LDX I,5
	LDY I,10.
10$:	LDA AX,IZVEL		;C  INITIALIZE Z VELOCITIES
	STA AY,ZVELOC
	LDA TPOSX+2		;C  INIT ALL PIECES POS
	STA AY,EXPOSX
	LDA TPOSX+3
	STA AY,EXPOSX+1
	LDA TPOSY+2
	STA AY,EXPOSY
	LDA TPOSY+3
	STA AY,EXPOSY+1
	LDA PRAND		;C  INITIALIZE ORIENTATION
	STA AY,EXPOSO
	LDA I,0
	STA AY,EXPOSZ
	STA AY,EXPOSZ+1
	DEY
	DEY
	DEX
	BPL 10$
	LDX I,0			;L  RESTORE X
20$:	RTS
	.SBTTL MOTION OF TANK
MOTION:	BIT ATRACT		;D  IF IN GAME
	BMI 10$
	BIT LOGO		;D  IF LOGO
	BMI 20$
	LDA CRACK
	BNE 20$
	LDX I,0			;C  MOVE IN ATTRACT
	BIT FRAME
	BVS 3$
	JSR M.FOR
	JMP 4$
3$:	JSR M.REV
4$:	BIT TPOSX+3
	BPL 6$
	BVC 20$
	JMP ITANGL
6$:	JMP DTANGL
10$:	LDX I,0
	LDA ZX,COLFLG
	BEQ M.TOP
20$:	RTS
M.TOP:
	JSR SAVEIT
	STX POTGO		;C  READ POKEY
	LDA ALLPOT
	STA PL1MOV
	EOR I,0F
	AND I,0F
	CMP I,5			;	< 4 IS ILLEGAL
	BCC M.STOP
	ASL
	TAY
	LDA AY,MTAB-9
	PHA
	LDA AY,MTAB-0A
	PHA
	RTS
MTAB:	.WORD M.FF-1,M.PR-1,M.RTF-1,M.STOP-1,M.PL-1,M.FR-1
	.WORD M.LTR-1,M.STOP-1,M.LTF-1,M.RTR-1,M.STOP-1
M.PR:	JSR DTANGL		;C  PIVOT RIGHT
	JSR DTANGL
	JMP M.6$		;B
M.PL:	JSR ITANGL		;C  PIVOT LEFT
	JSR ITANGL
	JMP M.6$		;B
M.LTF:	JSR ITANGL		;C   LEFT TURN FORWARD
	JMP M.F			;B
M.LTR:	JSR ITANGL		;C   LEFT TURN REVERSE
	JMP M.R			;B
M.RTF:	JSR DTANGL		;C  RIGHT TURN FOWARD
	JMP M.F			;B
M.RTR:	JSR DTANGL		;C  RIGHT TURN REVERSE
	JMP M.R
M.FF:	JSR M.FOR		;C  FULL FOWARD
M.F:	JSR M.FOR		;C  FORWARD
	INC ZX,TRDCTR
	JMP M.NEXT		;B
M.FR:	JSR M.REV		;C  FULL REVERSE
M.R:	JSR M.REV		;C  REVERSE
	DEC ZX,TRDCTR
M.NEXT:	JSR OBJOBJ		;D  IF NO COLLISION
	BCC M.6$
	JSR BAKOUT
	LDA OBJCOL		;D  IF ALREADY IN COLLISION
	BNE M.10$
	LDA I,BOING		;C  SOUND OF RUNNING INTO OBJECT
	JSR SNDON
	LDA I,3F
	STA BOUNCE
	INC OBJCOL
	BNE M.10$
M.6$:	LDA I,0
	STA OBJCOL
M.10$:	LDA I,HIDLE
	BNE M.NEX0
M.STOP:	LDA I,LIDLE
M.NEX0:	STA TEMP1		;C  SET ENGINE SPEED SOUND
	LDA AX,SNDWRD
	AND I,0EF
	ORA TEMP1
	STA ZX,SNDWRD
5$:	LDA ZX,FIRECT		;D  IF SHELL HAS BEEN FIRED
	BNE 50$
10$:	LDA PL1MOV		;D  IF FIRE BUTTON HAS NOT BEEN PUSHED
	AND I,PL1FIR
	BEQ 50$
	LDA I,7F		;C  INDICATE SHELL FIRED
	STA ZX,FIRECT
	LDA ZX,SNDWRD		;C  SET TO HI EXPLODE SOUND
	ORA I,LOUDSH
	STA ZX,SNDWRD
	LDA I,5			;C  TURN ON EXPLOSION
	STA SXPCNT
	LDA ZX,LANGLE
	CLC
	ROL
	ROL
	PHA
	LDA ZX,TANGLE
	STX SAVE1
	TAX
	PLA
	JSR COSXTR
	STA TEMP1
	TXA
	PHP
	LDX SAVE1
	STA ZX,SINCX
	PLP
	BMI 15$
	LDA I,0
	BEQ 16$
15$:	LDA I,0FF
16$:	ASL TEMP1
	ROL ZX,SINCX
	ROL
	STA ZX,SINCX+1
	LDA ZX,TANGLE
	TAX
	LDA GARBAG
	JSR SINXTR
	STA TEMP1
	TXA
	PHP
	LDX SAVE1
	STA ZX,SINCY
	PLP
	BMI 20$
	LDA I,0
	BEQ 21$
20$:	LDA I,0FF
21$:	ASL TEMP1
	ROL ZX,SINCY
	ROL
	STA ZX,SINCY+1
	LDA ZX,TPOSX		;C  INIT SHELL POSITION (LOAD SHELL)
	STA ZX,SHELLX
	LDA ZX,TPOSX+1
	STA ZX,SHELLX+1
	LDA ZX,TPOSY
	STA ZX,SHELLY
	LDA ZX,TPOSY+1
	STA ZX,SHELLY+1
50$:	RTS
M.SET:	LDA ZX,TANGLE		;C  GET ANGLE
	STX TEMP1		;	SAVE X
	JSR SIN			;C  SIN (ANGLE)/2
	TXA
	CMP I,80
	ROR
	STA Y1
	CMP I,80
	ROR
	CLC
	ADC Y1
	STA Y1
	BPL 10$			;	SIGN EXTEND
	LDA I,0FF
	BMI 11$
10$:	LDA I,0
11$:	STA Y1+1
	LDX TEMP1
	LDA ZX,TANGLE		;C  GET ANGLE
	JSR COS			;C  COS (ANGLE)/2
	TXA
	CMP I,80
	ROR
	STA X1
	CMP I,80
	ROR
	CLC
	ADC X1
	STA X1
	BPL 20$
	LDA I,0FF
	BMI 21$
20$:	LDA I,0
21$:	STA X1+1
	LDX TEMP1		;L  RESTORE INDEX
	RTS
M.FOR:	JSR M.SET
M.FOR1:	LDA ZX,TPOSX		;C  UPDATE X POSITION
	CLC
	ADC X1
	STA ZX,TPOSX
	LDA ZX,TPOSX+1
	ADC X1+1
	STA ZX,TPOSX+1
	LDA ZX,TPOSY		;C  UPDATE Y POS
	CLC
	ADC Y1
	STA ZX,TPOSY
	LDA ZX,TPOSY+1
	ADC Y1+1
	STA ZX,TPOSY+1
	RTS
M.REV:	JSR M.SET
	LDA ZX,TPOSX		;C  UPDATE X POS
	SEC
	SBC X1
	STA ZX,TPOSX
	LDA ZX,TPOSX+1
	SBC X1+1
	STA ZX,TPOSX+1
	SEC			;C  UPDATE Y POS
	LDA ZX,TPOSY
	SBC Y1
	STA ZX,TPOSY
	LDA ZX,TPOSY+1
	SBC Y1+1
	STA ZX,TPOSY+1
	RTS
ITANGL:	LDA I,80		;C  INCREMENT TANK'S ANGLE
	CLC
	ADC ZX,LANGLE
	STA ZX,LANGLE
	LDA I,0
	ADC ZX,TANGLE
	STA ZX,TANGLE
	RTS
DTANGL:	LDA ZX,LANGLE		;C  DECREMENT TANK'S ANGLE
	SEC
	SBC I,80
	STA ZX,LANGLE
	LDA ZX,TANGLE
	SBC I,0
	STA ZX,TANGLE
	RTS
;
;SAVEIT
;SAVES POSITION OF TANK OR ROBORT
;
;ON ENTRY X=0 MEANS TANK
;	  X=2 MEANS ROBOT
;
;BLITZES A
;
SAVEIT:	LDA ZX,TPOSX		;C  SAVE OLD TANK POSITION
	STA OTPOSX
	LDA ZX,TPOSX+1
	STA OTPOSX+1
	LDA ZX,TPOSY
	STA OTPOSY
	LDA ZX,TPOSY+1
	STA OTPOSY+1
	RTS
;
;BACKOUT
;UNDOES SAVEIT WITH SAME CONDITIONS
;
;BLITZES A
;
BAKOUT:	LDA OTPOSX		;C  DEAD STOP
	STA ZX,TPOSX
	LDA OTPOSX+1
	STA ZX,TPOSX+1
	LDA OTPOSY
	STA ZX,TPOSY
	LDA OTPOSY+1
	STA ZX,TPOSY+1
	RTS
	.PAGE
	.SBTTL REACT
	
;BLOCK NAME: REACT
;DESCRIPTION: SETS UP REACTION TIME FOR ROBOT
;INPUT PARAMS: HITS
;OUTPUT PARAMS: ACTION,SKILL
;REGISTERS: NONE
;
REACT:	PHA			;L  SAVE REGISTERS
	BIT ATRACT
	BMI 10$
	LDA I,30
	STA ACTION
	BNE 35$
	LDA HITS+1
	BEQ 5$
	LDA I,7F
	STA SKILL
	BNE 20$
5$:	LDA HITS		;C  WEIGHT REACTION TIME
	SEC
	SBC HITS+2
	STA SKILL
	BCS 10$
	EOR I,0FF
	ADC I,1
10$:	CMP I,5
	BCS 20$
	STA ACTION
	LDA I,5
	SBC ACTION
	ASL
	ASL
	ASL
	ASL
	BNE 30$
20$:	LDA I,4
30$:	STA ACTION
	BIT SKILL		;C  SET UP ACCURACY FOR ROBOT
	BMI 35$
	LDA I,10.
	SEC
	SBC SKILL
	BCS 40$
	LDA I,1
	BNE 40$
35$:	LDA I,0A
40$:	ASL
	STA SKILL
	PLA
	RTS
CHKS4:	.BYTE 0D5
	.PAGE
	.SBTTL ROBOT
;
;BLOCK NAME: ROBOT
;DESCRIPTION: CONTROL MOTION & FIRING OF ROBOT TANK
;INPUT PARAMS: ROBOT POSITON & ANGLE, ACTION
;OUTPUT PARAMS: ROBOT'S POSITION & ANGLE, & FIRE
;SUBROUTINES: M.DTANGL,M.ITANGE,M.FOR,M.REV,M.SET,TRACK
;	      DSTNCE,ABSTMP,RAND
;
ROBOT:	LDA COLFLG+2		;D  IF NOT BLOWN UP
	BEQ 1$
	RTS
1$:	BIT R2D3FL
	BPL 2$
	JMP BUZBOM
2$:	LDX I,2
	JSR SAVEIT		;C  SAVE POS
	CLC			;C  UPDATE RADAR ANGLE
	LDA RANGLE
	ADC I,0B
	STA RANGLE
	LDA STATE		;D  IF NOT COLLISION RETREAT
	LSR
	BCC 10$
	LSR			;C  BACK AWAY
	PHP
	JSR M.REV
	PLP
	BCC 7$
	JSR ITANGLE
	JMP 8$
7$:	JSR DTANGLE
8$:	DEC TRDCTR+2
3$:	LDA ACTION		;D  IF DONE BACKING
	BEQ 5$
	RTS
5$:	LDA STATE		;C  RESET COLLISION RETREAT
	AND I,0FC
	STA STATE
	LDA TANGLE+2		;C  SET UP NEW GOAL
	STA RGOAL
	LDA I,34
	STA ACTION
	RTS
10$:	LDA ACTION		;D  IF DECISION TIME
	BNE 11$
	JMP R.40$
11$:	LDA TANGLE+2		;D  IF ABS THETA < 30 DEG
	SEC
	SBC RGOAL
	TAY			;	SAVE
	BPL 12$
	EOR I,0FF
	CLC
	ADC I,1
12$:	CMP SKILL
	BCC 20$
	TYA			;D  IF PIVOT RIGHT
	BPL 15$
	JSR ITANGL		;C  PIVOT LEFT
	JSR FIREIT
	JSR ITANGL
	JSR FIREIT
	JSR TR7CHK
	BCS 14$
13$:	RTS
14$:	JSR ITANGL
	JSR FIREIT
	JSR ITANGL
	JMP FIREIT
15$:	JSR DTANGL		;C  PIVOT RIGHT
	JSR FIREIT
	JSR DTANGL
	JSR FIREIT
	JSR TR7CHK
	BCC 13$
	JSR DTANGL
	JSR FIREIT
	JSR DTANGL
	JMP FIREIT
20$:	CMP I,0			;D  IF ON TARGET
	BEQ 30$
	TYA
	BPL 25$			;D  IF TURN RIGHT
	JSR ITANGL		;C  TURN LEFT
	JMP 30$			;B
25$:	JSR DTANGL		;C  TURN RIGHT
30$:	JSR FIREIT
	LDA TEMP1		;C  CHECK DISTANCE
	STA TPOSXT
	LDA TEMP1+1
	STA TPOSXT+1
	LDA TEMP2
	STA TPOSYT
	LDA TEMP2+1
	STA TPOSYT+1
	STA DST2
	JSR TR7CHK
	LDA MOUTHI
	BCC 32$			;D  IF NOT TR7
	CMP I,8
	BCS R.37$
	RTS
32$:	CMP I,05		;D  IF NOT TOO CLOSE
	BCS R.37$
	RTS
R.37$:	LDX I,2			;C  MOVE FORWARD
	JSR M.SET
	JSR TR7CHK
	BCC 20$
	ASL Y1
	ROL Y1+1
	ASL X1
	ROL X1+1
20$:	JSR M.FOR1
	JSR OBJOBJ
	BCS 39$			;D  IF COLLISION
	INC TRDCTR+2		;C  MOVE TREAD
40$:	LDA TANGLE+2
	CMP RGOAL
	BEQ 38$
	RTS
38$:	JSR M.FOR1
	JSR OBJOBJ
	BCS 39$
	RTS
39$:	BIT ATRACT
	BPL 42$
	ORA I,0			;D  IF COLLIDED WITH PLAYER
	BMI 41$
	LDA PRAND		;C  INDICATE COLLISION
	AND I,2
	ORA I,1
42$:	ORA STATE
	STA STATE
	LDA I,30		;C  SET UP REACTION TIME
	STA ACTION
41$:	JMP BAKOUT		;C  UNDO DAMAGE
R.40$:	BIT ATRACT
	BPL R.RAND
R.50$:	LDA FTIMER		;D  IF WE'VE BEEN NICE TOO LONG
	CMP I,0FF
	BEQ R.ATCK
	LDA PRAND		;D  IF RANDOM ATTACK
	LSR
	BCC R.ATCK
	LDA HITS+1		;D  IF HE'S GOOD
	BNE R.ATCK
	LDA HITS		;D  IF EVADE
	SEC
	SBC HITS+2
	BEQ R.EVAD
	BCC R.RAND
	BCS R.ATCK
R.EVAD:	LDA $INTCT
	AND I,7
	BNE 10$
	LDA I,1
	ORA STATE
	STA STATE
	BNE 20$
10$:	LDA I,0
	STA STATE
	JSR TRACK		;C  BEAT FEET
	EOR I,40
	STA RGOAL
20$:	LDA I,40
	STA ACTION
	RTS
R.RAND:	LDA PRAND		;C  RANDOM
	AND I,1F
	BIT $INTCT
	BMI 10$
	SBC RGOAL
	BNE 20$
10$:	ADC RGOAL
20$:	STA RGOAL
	LDA I,0
	STA STATE
	JMP REACT
R.ATCK:	JSR TRACK		;C  ATTACK
	STA RGOAL
	LDA I,80		;C  INDICATE ATTACK
	STA STATE
	JMP REACT
;
;FIREIT
;
;EXIT:	SHELL FIRED OR NOT
;USES	A
;	
FIREIT:	LDA FTIMER		;D  IF TOO SOON AFTER APPEARING
	CMP I,20
	BCS 3$
2$:	RTS
3$:	CMP I,0FF
	BEQ 5$
	LDA HITS+1		;D  IF HE'S GOOD
	BNE 5$
	LDA HITS		;D  IF NOT ROOKIE
	LSR
	BNE 5$
	LDA PTURN		;D  IF NOT IN VIEW
	CMP I,20
	BCS 2$
1$:	LDA TDIST		;D  IF TOO FAR
	CMP I,24
	BCS 50$
5$:	JSR TRACK		;D  IF NOT ON TARGET
	LDX I,2
	SEC
	SBC TANGLE+2
	BPL 10$
	CLC
	EOR I,0FF
	ADC I,2
10$:	CMP I,2
	BCS 50$
	LDA FIRECT+2		;D  IF SHELL NOT AVAILABLE
	BNE 50$
	LDA COLFLG		;D  IF PLAYER IS HIT
	BNE 50$
35$:	LDA I,7F		;C  FIRE!!
	STA FIRECT+2
	LDA I,5			;C  SHELL SOUND
	STA SXPCNT
	LDA SNDWRD
	AND I,SOFTSH
	STA SNDWRD
	LDA TANGLE+2		;C  SET UP SHELLS MOTION
	JSR COS
	STA TEMP1
	TXA
	STA SINCX+2
	BMI 31$
	LDA I,0
	BEQ 32$
31$:	LDA I,0FF
32$:	ASL TEMP1
	ROL SINCX+2
	ROL
	STA SINCX+3
	LDA TANGLE+2
	JSR SIN
	STA TEMP1
	TXA
	STA SINCY+2
	BMI 33$
	LDA I,0
	BEQ 34$
33$:	LDA I,0FF
34$:	ASL TEMP1
	ROL SINCY+2
	ROL
	STA SINCY+3
	LDA TPOSX+2		;C  INIT SHELL POSITION
	STA SHELLX+2
	LDA TPOSX+3
	STA SHELLX+3
	LDA TPOSY+2
	STA SHELLY+2
	LDA TPOSY+3
	STA SHELLY+3
	LDX I,2			;L  RESTORE X
50$:	RTS
	.SBTTL R2D3 BUZZ BOMBER

;BLOCK NAME:	BUZBOM
;DESCRIPTION:	THIS ROUTINE CONTROLS MOVEMENT OF R2D3-BUZZ-BOMB.  IT IS
;		CALLED IN LIEU OF ROBOT AND FLIES THE BUZZ BOMB DIRECTLY
;		AT PLAYER, AT HIGH SPEED, SWOOPING IN ON HIM.  IF ANOTHER
;		OBJECT IS ENCOUNTERED, BUZZ-BOMB LEVITATES AND RESTARTS
;		SWOOPING.
;INPUT PARAMS:	TANK POSITION, R2D3 POSITION,R2D3 ANGLE,OBJCOL,TDIST
;OUTPUT PARAMS:	COLFLG'S,CRACK,R2D3 POS & ANGLE,TRDCTR
;REGISTERS:	A,X,Y
;SUBROUTINES:	TRACK,M.FOR,OBJCOL

BUZBOM:	INC TRDCTR+2		;C  ALWAYS CHANGE THRUST PICTURE
1$:	LDA I,TOP&0FF		;D  IF TOP > Z HEIGHT AND OBJCOL
	CMP EXPOSZ+0C
	LDA I,TOP/100
	SBC EXPOSZ+0D
	LDA I,0
	ROL
	STA GARBAG
	AND OBJCOL+2
	BEQ 2$
	JMP 30$
2$:	LDA TANGLE		;C  INSURE NO BACK ATTACKS
	SEC
	SBC RGOAL
	STA TEMP2
	BPL 3$
	CLC
	EOR I,0FF
	ADC I,1
3$:	CMP I,40
	BCS 4$
	LDX I,2
	BIT TEMP2
	BPL 12$
	BMI 6$
4$:	JSR TRACK		;C  ADJUST DIRECTION
	LDX I,2
	STA TEMP2
	LDA RGOAL
	SEC
	SBC TEMP2
	BEQ 20$
	BPL 10$			;	IF DECREMENT NEEDED
	CMP I,0FD
	BCC 5$
6$:	INC RGOAL
5$:	INC RGOAL
	JMP 20$
10$:	CMP I,3
	BCC 15$
12$:	DEC RGOAL
15$:	DEC RGOAL
20$:	LDA NOR2D3		;D  IF FIRST R2D3
	BEQ 37$
	LDA HITS+1
	BNE 33$
	LDA OPTION
	LSR
	LSR
	AND I,3
	TAX
	LDA AX,MISLVL
	CLC
	SED
	ADC I,25
	CLD
	SEC
	SBC HITS
	BMI 33$
	CMP I,8
	BCS 35$
33$:	LDA I,8
35$:	CMP TDIST
	BCC 40$
37$:	LDA RGOAL
	JMP 19$
40$:	LDA FRAME		;C  SET UP X1 & Y1 FOR M.FOR1
	LSR
	LSR
	LSR
	LSR
	LDA FRAME
	AND I,1F
	STA TEMP1
	LDA RGOAL
	BCS 18$
	ADC TEMP1
	JMP 19$
18$:	SBC TEMP1
19$:	STA TANGLE+2
	JSR SIN
	STX Y1
	PHA
	LDA I,0
	BIT Y1
	BPL 22$
	LDA I,-1
22$:	STA Y1+1
	PLA
	ASL
	ROL Y1
	ROL Y1+1
	ASL
	ROL Y1
	ROL Y1+1
	LDA TANGLE+2
	JSR COS
	STX X1
	PHA
	LDA I,0
	BIT X1
	BPL 24$
	LDA I,-1
24$:	STA X1+1
	PLA
	ASL
	ROL X1
	ROL X1+1
	ASL
	ROL X1
	ROL X1+1
	LDA TPOSX+2		;C  SAVE OLD POSITION
	STA OTPOSX
	LDA TPOSX+3
	STA OTPOSX+1
	LDA TPOSY+2
	STA OTPOSY
	LDA TPOSY+3
	STA OTPOSY+1
	LDX I,2
	JSR M.FOR1		;C  MOVE FORWARD
	JSR QWIKCK		;D  IF WE'RE BLOWN UP
	BCS 26$
	LDX I,2
	JSR OBJOBJ		;D  IF NO COLLISION
	BCC 25$
	LDX GARBAG		;D  IF ON GROUND
	BNE 28$
	RTS
25$:	LDA I,0
	STA OBJCOL+2
	LDA EXPOSZ+0C
	ORA EXPOSZ+0D
	BEQ 26$
	DEC EXPOSZ+0D
26$:	RTS
28$:	ORA I,0
	BMI 60$			;D  IF WE GOT HIM
	LDA OTPOSX		;C  BACK OUT POSITION CHANGE
	STA TPOSX+2
	LDA OTPOSX+1
	STA TPOSX+3
	LDA OTPOSY
	STA TPOSY+2
	LDA OTPOSY+1
	STA TPOSY+3
	INC OBJCOL+2		;C  INDICATE COLLISION
	RTS
30$:	INC EXPOSZ+0D
50$:	RTS
60$:	LDA I,20		;C  BLOW'M BOTH UP
	STA COLFLG
	STA COLFLG+2
	LDA I,2
	STA CRACK
	LDA I,-1
	STA BOUNCE
	LDA I,1			;C  ONLY POINTS FOR ENEMY
	CLC
	SED
	ADC HITS+2
	CLD
	STA HITS+2
	LDX I,0
	STX CHAN3V
	STX CHAN4V
	JSR EXINIT
	LDA I,-1
	STA EXPCNT
	LDA SNDWRD
	AND I,HIX
	STA SNDWRD
	DEC LIVES
	BNE 70$
	INC GOVER
70$:	RTS
	.PAGE
	.SBTTL SAUCER MOTION
;BLOCK NAME:	SAUCMV
;DESCRIPTION:	THIS ROUTINE CONTROL ENTRANCE,
;		EXIT, & MOTION OF SAUCER
;
;INPUT PARAMS:	SCDLFG,STIMER,SAUCER,SCANGL,SAPOSX,SAPOSY
;OUTPUT PARAMS:	SAPOSX,SAPOSY,SAINCX,SAINCX,SCANGL,SINT,STIMTER
;REGISTERS:	A
;
SAUCMV:	LDA SCOLFG		;D  IF NOT BLOWING UP
	BEQ 20$
	CMP I,30		;D  IF < 30
	BCC 10$
	LDA I,60
	SEC
	SBC SCOLFG
10$:	CLC
	ADC I,8			;C  SET INTENSITY FOR EXPLOSION
	ASL
	ASL
	AND I,0F0
	STA SINT
	DEC SCOLFG		;D  IF EXPLOSION NOT OVER
	DEC SCOLFG
	BNE 15$
	LDA PRAND		;C  RESET TIMER TILL NEXT SAUCER
	STA STIMER
	LDA I,0
	STA SAUCER
15$:	RTS
20$:	LDA SAUCER		;D  IF NOT SAUCER
	BEQ 40$
	LDA SCANGL		;C  ROTATE SAUCER
	CLC
	ADC I,8
	STA SCANGL
	LDA STIMER		;D  IF DECSION TIMER
	BEQ 30$
	CLC			;C  MOVE SAUCER
	LDA SAINCX
	ADC SAPOSX
	STA SAPOSX
	LDA SAPOSX+1
	ADC SAINCX+1
	STA SAPOSX+1
	LDA SAPOSY
	CLC
	ADC SAINCY
	STA SAPOSY
	LDA SAPOSY+1
	ADC SAINCY+1
	STA SAPOSY+1
28$:	DEC STIMER
	RTS
30$:	LDA PRAND		;C  SET NEW MOTION VALUES
	STA SAINCX
	ORA I,0
	BMI 31$
	LDA I,0
	BEQ 32$
31$:	LDA I,-1
32$:	STA SAINCX+1
	LDA PRAND
	STA SAINCY
	ORA I,0
	BMI 35$
	LDA I,0
	BEQ 36$
35$:	LDA I,-1
36$:	STA SAINCY+1
	LDA PRAND		;C  RESET TIMER
	LSR
	STA STIMER
	RTS
40$:	LDA HITS		;D  IF SCORE NOT TOO LOW
	LSR
	BNE 41$
	RTS
41$:	LDA STIMER		;D  IF NOT TIME YET
	BNE 28$
	LDA PRAND		;C  BRING OUT SAUCER
	STA SAPOSX+1
	LDA PRAND
	STA SAPOSY+1
	INC SAUCER
	BNE 30$			;B  SET UP MOITION
	.PAGE
	.SBTTL TRACKING ROUTINE
	
;BLOCK NAME: TRACK
;DESCRIPTION: THIS ROUTINE COMPUTE THE VECTOR
;	      BETWEEN THE ROBOT TANK AND THE PLAYER
;	      CONTROLLED TANK, AND USING THE ARCTANGENT
;	      FUNCTION, RETURNS THE ANGLE TO DIRECT THE
;	      ROBOT TANK IN.
;INPUT PARAMS: TPOSX,TPOSY FOR BOTH TANKS
;OUTPUT PARAMS: (A)=NEW ANGLE TO DIRECT ROBOT
;TEMP1	=ABS VALUE(Y)
;TEMP2	=ABS VALUE(X)
;REGISTERS: A,X,Y
;SUBROUTINES: NONE
;
TRACK:	LDY I,0				;C  INITIALIZE QUADRANT
	SEC				;C  HIS XPOS MINUS ROBOT XPOS
	LDA TPOSX
	SBC TPOSX+2
	STA TEMP1
	LDA TPOSX+1
	SBC TPOSX+3
	STA TEMP1+1
	BPL 10$				;D  IF POSITIVE
	JSR ABSTMP			;C  TAKE ABSOLUTE VALUE
	INY				;C  X < 0 MEANS QUAD 2 OR 3
10$:	LDA TEMP1			;C  MOVE ABSOLUTE VALUE
	STA TEMP2
	LDA TEMP1+1
	STA TEMP2+1
	LDA TEMP1+1
	SEC				;C  HIS YPOS MINUS ROBOT YPOS
	LDA TPOSY
	SBC TPOSY+2
	STA TEMP1
	LDA TPOSY+1
	SBC TPOSY+3
	STA TEMP1+1
	BPL 20$				;D  IF POSITIVE
	JSR ABSTMP			;C  ABSOLUTE VALUE
	TYA			;C  Y < 0 MEANS QUAD 2 OR 3
	BEQ 12$
	INY
	BNE 20$
12$:	LDY I,3
20$:	LDA TEMP1			;D  IF X > Y
	CMP TEMP2
	BNE 25$				;	(IF NOT EQUAL)
	LDA TEMP1+1
	CMP TEMP2+1
	BEQ 22$			;D  IF X=Y
	SEC
	BCS 25$
22$:	LDA I,20		;C  USE 45 DEG
	BNE 45$
25$:	LDA TEMP1+1
	SBC TEMP2+1
	PHP				;	(SAVE STATUS)
	BCC 30$
28$:	LDA TEMP1			;C  COMPUTE X/Y
	STA XPL
	LDA TEMP1+1
	STA XPH
	LDA TEMP2
	STA DIVOUT
	LDA TEMP2+1
	STA DIVOUT+1
	STA ZDIV
	JMP 40$
30$:	LDA TEMP2			;C  COMPUTE Y/X
	STA XPL
	LDA TEMP2+1
	STA XPH
	LDA TEMP1
	STA DIVOUT
	LDA TEMP1+1
	STA DIVOUT+1
	STA ZDIV
40$:	JSR WAIT
	STA TEMP3
	LDA MOUTHI
	LSR				;C  DOUBLE SHIFT RIGHT
	ROR TEMP3
	LSR
	ROR TEMP3
	LDX TEMP3
	LDA AX,ARCTAN			;C  GET ARCTANGENT
	PLP				;D  IF Y/X
	BCC 45$
	STA TEMP3			;C  SUBTRACT FROM 90 DEGREES
	LDA I,40
	SBC TEMP3
45$:	TAX				;C  SET UP FOR DO CASE
	TYA
	ASL
	TAY
	LDA AY,TTAB+1
	PHA
	LDA AY,TTAB
	PHA
	TXA
	RTS
TTAB:	.WORD T.0-1,T.1-1,T.2-1,T.3-1
T.1:	CLC				;C  PFM
	EOR I,0FF
	ADC I,1
T.2:	EOR I,80
	JMP T.0
T.3:	CLC
	EOR I,0FF
	ADC I,1
T.0:	RTS

;ARCTANGENT TABLE CREATED 5-SEP-79
	.PAGE
	.SBTTL OBJECT-OBJECT COLLISION DETECT
	
;BLOCK NAME: OBJOBJ
;DESCRIPTION: THIS ROUTINE WILL CHECK FOR
;	      COLLISION BETWEEN TANKS AND PLAYFIELD
;	      OBJECTS
;INPUT:	(X)=0 FOR PLAYER TANK
;	(X)=2 FOR ROBOT TANK
;	TPOSX,TPOSX,PTBLO1,PTBLX1,PTBLY1,PROXTB
;OUTPUT PARMS: CARRY SET COLLISION, 0=NONTANK COLLISION, -1=TANK COLLISION IN(A)
;REGISTERS:   DSTNCE
;USES:	TEMP1,TEMP2,TEMP3
;
OBJOBJ:	CLC
	STX TEMP1		;L  SAVE X
	LDA ZX,TPOSX		;C  SET UP MATH BOX
	STA ACOS
	LDA ZX,TPOSX+1
	STA ACOS+1
	LDA ZX,TPOSY
	STA BSIN
	LDA ZX,TPOSY+1
	STA BSIN+1
	LDY I,0
10$:	LDA AY,PTBLO1		;D  IF DONE
	BMI 50$
	LDA AY,PTBLX1		;C  GET DISTANCE TO OBJECT
	STA TPOSXT
	LDA AY,PTBLX1+1
	STA TPOSXT+1
	LDA AY,PTBLY1
	STA TPOSYT
	LDA AY,PTBLY1+1
	STA DSTNCE
	CMP NX,0
	LDA MOUTLO
	STA TEMP3
	LDA MOUTHI
	STA TEMP3+1
	TXA			;D  IF ROBOT
	BNE 20$			;C  COLLIDE SO WE CAN SEE OBJECT
	LDA I,80
	CMP TEMP3
	LDA I,4
	BNE 30$
20$:	LDA AY,PTBLO1
	ASL
	TAX
	BIT R2D3FL
	BPL 25$
	LDA TEMP3+1		;C  3/4 TANK RADIUS
	CMP I,80
	ROR
	STA TEMP2+1
	LDA TEMP3
	ROR
	CLC
	ADC TEMP3
	STA TEMP3
	LDA TEMP2+1
	ADC TEMP3+1
	STA TEMP3+1
	BCC 25$
	LDX TEMP1
	BCS 40$
25$:	LDA AX,PROXTB		;D  IF COLLISION
	CMP TEMP3
	LDA AX,PROXTB+1
	LDX TEMP1
30$:	SBC TEMP3+1
	LDA I,0			;C  SET FOR NONTANK COLLISION
	BCS 60$
40$:	INY			;C  NEXT OBJECT
	INY
	BNE 10$			;B
50$:	LDA COLFLG		;D  IF EITHER IN COLLISION
	ORA COLFLG+2
	BNE 60$
	TXA
	EOR I,2
	TAX
	LDA ZX,TPOSX
	STA TPOSXT
	LDA ZX,TPOSX+1
	STA TPOSXT+1
	LDA ZX,TPOSY
	STA TPOSYT
	LDA ZX,TPOSY+1
	STA DSTNCE
	CMP NX,0		;	WASTE TIME
	LDA MOUTLO
	STA TEMP3
	LDA MOUTHI
	STA TEMP3+1
	LDA I,5
54$:	BIT R2D3FL		;	SMALLER COLL. RADIUS FOR R2D3
	BPL 55$
	LDA I,3
55$:	SEC
	SBC TEMP3+1		;CARRY SET IF COLL.
	LDA I,0FF		;C  INDICATE TANKS
60$:	LDX TEMP1		;L  RESTORE X
	RTS
PROXTB:	.WORD 340,340
	.REPT 10.
	.WORD 0
	.ENDR
	.WORD 400,0,0,3C0
	.PAGE
	.SBTTL CHECK FOR HIGH POWERED TANK ROBOT
;BLOCK NAME: TR7CHK
;BLOCK DESCRIPTION: DETERMINES IF WE HAVE OR SHOULD HAVE
;		    THE TR7 INSTEAD OF THE OLD CLVUKER
;INPUT PARAMS: NOR2D3
;OUTPUT PARAMS: CARRY SET=TR7
;REGISTERS USED: A
;
TR7CHK:	CLC			;C		ASSUME REGULAR TANK
	LDA NOR2D3
	BMI 10$
	CMP I,5			;C  CLEAR CARRY FOR TANK
10$:	RTS
	.PAGE
	.SBTTL ROBOT RESET CHECK
	
;BLOCK NAME: ROBCHK
;DESCRIPTION: ROBCHK WILL RANDOMNLY RESET HIS GOAL AND TAKE HIM
;	      OUT OF ATTACK MODE FOR A SHORT TIME, AS
;	      WELL AS MOVING HIM TO A NEW POSITION.
;INPUT:	      COLFLG
;OUTPUT:      TPOSX,TPOSY,COLFLG,STATE,ACTION,RGOAL
;REGISTERS:   A,X
;SUBROUTINES: RAND, OBJBOJ,ROBOT
;
ROBCHK:	LDA GOVER
	BNE TANKCK
	LDA HITS+1
	BNE 10$
	LDA OPTION
	LSR
	LSR
	AND I,3
	TAX
	LDA HITS		;D  IF NOT BUZZ BOMB
	CMP AX,MISLVL
	BCC TANKCK
10$:	LDY PRAND		;C  FUDGE POKEY RANDOMNESS
	TYA
	EOR OLDRND
	STY OLDRND
	LSR
	BCC TANKCK
	LDA I,2			;C  SET SHORTER WAIT TIME
	STA TIMOUT
	BNE R2D3CK		;B
TANKCK:	LDA PRAND		;C  RESET GOAL
	STA RGOAL
	LDA I,0
	STA R2D3FL		;C  RESET TO TANK
	STA COLFLG+2		;C  OUT OF COLLISION
	LDA I,1			;C  SET REACTION TIME SHORT
	STA ACTION
	STA TIMOUT
	BIT ATRACT		;D  IF ATRACT PUT TANK IN FRONT
	BPL 10$
	LDA HITS+1
	BNE 6$
	SEC
	LDA HITS		;C  DETERMINE WINDOW FOR TANK
	SBC HITS+2
	BCC 10$
	BEQ 10$
	CMP I,7
	BCC 8$
6$:	LDA I,7
8$:	LSR
	BEQ 10$
	TAX
	LDA I,0F
9$:	SEC
	ROL
	DEX
	BNE 9$
	BEQ ROB1
10$:	LDA I,0F
	JMP ROB1
R2D3CK:	INC NOR2D3		;C  THIS WILL SET NOR2D3 TO 0 FOR FIRST
	LDA I,STARTZ/100
	STA EXPOSZ+0D
	LDA I,STARTZ&0FF
	STA EXPOSZ+0C
	LDA I,80
	STA STATE
	LDX I,0FF
	STX CHAN3F
	DEX
	STX CHAN4F
	LDA I,-1
	STA R2D3FL		;C  PUT BUZZ BOMB IN FRONT TO HIM
	LDA PRAND
	AND I,0F
ROB1:	STA TEMP1
	LDA PRAND
	AND TEMP1
	BIT $INTCT
	BVS 20$
	EOR I,0FF
20$:	CLC
	ADC TANGLE
	STA TEMP1
	JSR COS
	STA TEMP2		;C  X=X-1/4*X
	STA X1
	STX X1+1
	TXA
	CMP I,80
	ROR
	ROR TEMP2
	CMP I,80
	ROR
	ROR TEMP2
	STA TEMP2+1
	LDA X1
	SEC
	SBC TEMP2
	STA TEMP2
	LDA X1+1
	SBC TEMP2+1
	TAX
	BIT R2D3FL
	BMI 45$
	LDA PRAND
	LSR
	PHP
	TXA
	BCC 45$
	CMP I,80
	ROR
	ROR TEMP2
45$:	STA TEMP2+1
	LDA TEMP1
	JSR SIN
	STA TEMP1		;C  Y=Y-1/4*Y
	STA Y1
	STX Y1+1
	TXA
	CMP I,80
	ROR
	ROR TEMP1
	CMP I,80
	ROR
	ROR TEMP1
	STA TEMP1+1
	SEC
	LDA Y1
	SBC TEMP1
	STA TEMP1
	LDA Y1+1
	SBC TEMP1+1
	BIT R2D3FL
	BMI 49$
	PLP
	BCC 49$
	CMP I,80
	ROR
	ROR TEMP1
49$:	STA TEMP1+1		;C  SET UP STARTING POS
	CLC
	LDA TPOSX
	ADC TEMP2
	STA TPOSX+2
	LDA TPOSX+1
	ADC TEMP2+1
	STA TPOSX+3
	LDA TPOSY
	CLC
	ADC TEMP1
	STA TPOSY+2
	LDA TPOSY+1
	ADC TEMP1+1
	STA TPOSY+3
	BIT R2D3FL
	BPL 50$
	JSR TRACK		;C  SET UP STARTING ANGLE
	STA TANGLE+2
	STA RGOAL
50$:	LDA I,0
	STA EIRNGE
	STA FTIMER
	RTS
	.PAGE
	.SBTTL DISPLAY RADAR
	
;BLOCK NAME: DRADAR
;DESCRIPTION: THIS ROUTINE WILL DISPLAY RADAR SWEEP
;	      AND BLIP OF OTHER TANK, IF WITH FIRING RANGE
;INPUT PARAMETERS: SANGLE,(TEMP1,TEMP2) SET UP BY TRACK ROUTINE
;OUTPUT PARAMETERS: TDIST
;REGISTERS: A,X,Y
;SUBROUTINES: TRACK,SIN,COS,VGLABS,VGVCTR
;
DRADAR:	LXL RDRING
	LAH RDRING
	JSR VGJSRL
	LDA I,0
	STA XCOMP+1
	STA YCOMP+1
	STA CURNTX+1
	LDA I,0B			;C  INCREMENT SWEEP ANGLE
	CLC
	ADC SANGLE
	STA SANGLE
	JSR SIN				;C  SIN/2
	TXA
	CMP I,80
	ROR
	STA XCOMP
	STA CURNTX
	BPL 10$
	LDA I,0FF
	STA XCOMP+1
	STA CURNTX+1
10$:	LDA SANGLE			;C  COS/2
	JSR COS
	TXA
	CMP I,80
	ROR
	STA XCOMP+2
	BPL 20$
	LDA I,0FF
	STA XCOMP+3
20$:	LDA I,0A0			;C  DRAW BRIGHT VECTOR
	STA VGBRIT
	LDA I,CENTRY&0FF
	CLC
	ADC XCOMP+2
	STA CURNTY
	LDA I,CENTRY/100
	ADC XCOMP+3
	STA CURNTY+1
	JSR VGVTR2
	LDA COLFLG+2			;D  IF NOT EXPLODING
	BEQ 21$
	LDA I,0
	STA CHAN3V
	STA CHAN4V
	RTS
21$:	JSR TRACK			;C  TRACK THE ROBOT
	EOR I,80
	SEC
	STA GARBAG			;C  RELATIVE ANGLE OF ROBOT
	LDA TANGLE
	SBC GARBAG
	STA GARBAG
	LDA SANGLE			;D  IF NOT ON SWEEP LINE
	SEC
	SBC GARBAG
	BMI 23$
	CMP I,0C
	BCS 23$
	LDA I,0F0			;C  SET BRIGHTNESS OF BLIP
	STA BLIP
23$:	LDA TEMP1		;C  COMPUTE DISTANCE
	STA TPOSXT
	LDA TEMP1+1
	STA TPOSXT+1
	LDA TEMP2
	STA TPOSYT
	LDA TEMP2+1
	STA TPOSYT+1
	STA DST2
	CMP NX,0
	LDA MOUTLO
	STA TEMP3
	LDA MOUTHI
	STA TDIST
	TAX
	BMI 24$
	LSR			;C  SET VOLUME
	LSR
	LSR
	AND I,0F
	EOR I,0AF	
	BIT R2D3FL
	BMI 25$
24$:	LDA I,0
25$:	STA CHAN3V
	STA CHAN4V
	TXA
	STA XMATRX
	CMP I,80			;D  IF OUT OF RANGE
	BCC 35$
	LDA I,0
	STA EIRNGE		;C  OUT OF RANGE
	BIT R2D3FL
	BPL 30$
	LDA TIMOUT		;D  IF NOT TIMED OUT ON R2D3'S
	CMP I, 4
	BCC 27$
	JSR TANKCK
	JMP DR.BLP
27$:	JSR R2D3CK
30$:	JMP DR.BLP
35$:	LDA BLIP		;D  IF SWEEP TOO LATE
	BNE 36$
	RTS
36$:	CMP I,0F0
	BCC 40$
	LDA I,RBEEP
	JSR SNDON
40$:	LDA GARBAG			;C  SETUP SIN FOR MAXTRIX MULT
	JSR SIN
	STA ACOS
	STX ACOS+1
	LDA GARBAG
	JSR COS				;C  SETUP COS FOR MATRIX MULT
	STA BSIN
	STX BSIN+1
	LDA I,CENTRX&0FF
	STA TPOSXT
	LDA I,CENTRX/100
	STA TPOSXT+1
	LDA I,CENTRY&0FF
	STA TPOSYT
	LDA I,CENTRY/100
	STA TPOSYT+1
	LDA I,0
	STA XMATRX+1
	STA VGBRIT			;C  SET ZERO BRITE
	STA YMATRX			;C  START MATRIX MULT
	STA YSTRT2
	JSR WAIT		;C  SCALE RESLT
	STA DXP
	LDA MOUTLO
	SEC
	SBC CURNTX
	STA XCOMP
	LDA MOUTHI
	STA DYPH			;	RESTAT MULTIPLIER
	SBC CURNTX+1
	STA XCOMP+1
	LDA MOUTLO
	SEC
	SBC CURNTY
	STA YCOMP
	LDA MOUTHI
	SBC CURNTY+1
	STA YCOMP+1
	JSR VGVTR2
	LDA BLIP		;C  DRAW BLIP
	AND I,0E0
	JSR VGDOT
	LDA VGBRIT
	JSR VGDOT
	BIT ATRACT		;D  IF IN GAME
	BMI D.5
	BIT LOGO		;D  IF LOGO IS BEING DRAWN
	BMI D.10
D.5:	LDA I,2
	AND FRAME
	BEQ D.10
	LDX I,ERANGE		;C  INDICATE IN RANGE
	JSR MSGS
D.10:	LDA EIRNGE		;D  IF ALREADY IN RANGE
	BNE DR.BLP		;C  DRAW BLIP
	INC EIRNGE		;C  INDICATE IN RANGE
	LDA I,WARNG		;C  OUTPUT WARNING SOUND
	JSR SNDON
DR.BLP:	LDA BLIP			;D  IF SWEEP WAY PAST
	BEQ DR.RTN
	SEC
	SBC I,8
	STA BLIP
DR.RTN:	RTS
	.PAGE
 	.SBTTL UPDATE SHELL POSITION

;BLOCK NAME:	SHUPDT
;DESCRIPTION:	UPDATES SHELLS POSITION
;INPUT PARAMS:	SHELLX,SHELLY,SINCX,SINCY
;OUTPUT PARAMS:	SHELLX,SHELLY
;REGISTERS:	A,X

SHUPDT:	LDX I,2			;C  START WITH SECOND SHELL
10$:	LDA ZX,FIRECT		;D  IF SHELL NOT IN AIR
	BEQ 20$
	BMI 20$
	DEC ZX,FIRECT		;C  RANGE SHELL
	CLC
	LDA ZX,SHELLX		;C  UPDATE SHELL'S X POS
	ADC ZX,SINCX
	STA ZX,SHELLX
	LDA ZX,SHELLX+1
	ADC ZX,SINCX+1
	STA ZX,SHELLX+1
	LDA ZX,SHELLY		;C  UPDATE SHELL'S Y POS
	CLC
	ADC ZX,SINCY
	STA ZX,SHELLY
	LDA ZX,SHELLY+1
	ADC ZX,SINCY+1
	STA ZX,SHELLY+1
20$:	DEX
	DEX
	BEQ 10$
	RTS
CHKS5:	.BYTE 6B
	.PAGE
	.SBTTL MESSAGE ROUTINE
;
;BLOCK NAME:	MSGS
;DESCRIPTION:	WILL OUTPUT SPECIFIED MESSAGE TO SPECIFIED LOCATION ON SCREEN
;INPUT PARAMS:	(X)=MESSAGE # * 2
;OUTPUT PARAMS:	NONE
;REGISTERS:	A,X,Y
LNGTBL:	.WORD ENGLISH-1,GERMAN-1,FRENCH-1,SPANSH-1
MSGS:	LDA OPTION		;D  DO CASE LANGUAGE
	ROL
	ROL
	ROL
	ROL
	AND I,6
	TAY
	LDA AY,LNGTBL+1
	PHA
	LDA AY,LNGTBL
	PHA
	RTS
SPANSH:	LDA AX,SPNMSG
	STA TBLPTR
	LDA AX,SPNMSG+1
	JMP MSTART
FRENCH:	LDA AX,FRNMSG
	STA TBLPTR
	LDA AX,FRNMSG+1
	JMP MSTART
GERMAN:	LDA AX,GRMMSG
	STA TBLPTR
	LDA AX,GRMMSG+1
	JMP MSTART
ENGLISH:LDA AX,ENGMSG		;C  SET UP POINTER
	STA TBLPTR
	LDA AX,ENGMSG+1
MSTART:	STA TBLPTR+1
	LDY I,0
	TXA
	CMP I,GAMOVR
	LDA I,2			;C  SET SCALING
	BCC 5$
	LDA I,1
5$:	STA TEMP3+1
	LDA NY,TBLPTR
	INY			;D IF NO POSITIONING NEEDED
	ORA NY,TBLPTR
	BEQ 10$
				;C POSITION FOR MSG
	JSR VGCNTR
	LDY I,1
	LDA NY,TBLPTR
	TAX
	DEY
	LDA NY,TBLPTR
	JSR VGVTR
10$:	LDA TEMP3+1
	JSR VGSCA1
	LDY I,2			;C  INIT LOOP
	LDA I,0			;C  INIT VGLIST OFFSET
	STA TEMP1
20$:	LDA NY,TBLPTR		;C  GET CHARACTER REPRESENTATION
	STA TEMP2
	AND I,7F
	INY
	STY TEMP3		;	SAVE Y
	TAX
	LDA AX,VGMSGA		;C  GET CORRECT JSRL
	LDY TEMP1
	STA NY,VGLIST
	INY
	LDA AX,VGMSGA+1
	STA NY,VGLIST
	INY
	STY TEMP1		;	SAVE Y
	LDY TEMP3		;C  GET CHARACTER PTR
	BIT TEMP2		;D  IF NOT END OF STRING
	BPL 20$
	LDY TEMP1		;C  UPDATE VGLIST
	DEY
	JSR VGADD
	LDA I,1			;C  RESET SCALE
	JMP VGSCA1
	.PAGE
	.SBTTL INFORMATION OUTPUT
;
;BLOCK NAME:	INFO
;DESCRIPTION:	HANDLES MESSAGES & STATISTICS
;INPUT PARAMS:	HITS
;OUTPUT PARAMS:	NONE
;REGISTERS:	A,X,Y
;SUBROUTINES:	MSGS

INFO:	JSR VGCNTR
	LDY I,0
	STY VGSIZE
	LDX I,90.			;C  Y/4
	LDA I,32.			;C  X/4
	JSR VGVTR
	LDA LIVES			;D  IF DEAD
	BEQ 20$
	STA TEMP1
	LDY I,0
	LDX TSYMBL+1
10$:	LDA TSYMBL			;C  OUTPUT 1 TANK PER LIFE
	STA NY,VGLIST
	TXA
	INY
	STA NY,VGLIST
	INY
	DEC TEMP1
	BNE 10$
	DEY
	JSR VGADD
20$:	LDX I,YSCORE
	JSR MSGS
	LDY I,0
	LDX I,0			;C  LABS SHORT FORM (Y/4)
	LDA I,-42.		;		    (X/4)
	JSR VGVTR
	LDA I,HITS
	JSR DIGT2S
	LDX I,CHISCR
	JSR MSGS
	LDA I,2
	JSR VGSCA1
	LDY I,0
	LDX I,0
	LDA I,-42.
	JSR VGVTR
	LDA HSCTBL
	STA TEMP2
	LDA HSCTBL+1
	STA TEMP2+1
	LDA I,TEMP2
	JSR DIGT2S
	LDA I,1			;C RESET SCALE INFO
	JMP VGSCA1
.SBTTL MACRO DEFINITIONS

.MACRO TDOT INDEX
.BYTE <INDEX*8&^H0F8>
.ENDM

.MACRO SBRITE VALUE
.BYTE 1+<VALUE&^H0F0>
.ENDM

.MACRO BVCTR VALUE
.BYTE 2+<<VALUE*8>&^H0F8>
.ENDM

.MACRO TLABS INDEX
.BYTE 3+<<INDEX*8>&^H0F8>
.ENDM

.MACRO TVCTR INDEX
.BYTE 4+<<INDEX*8>&^H0F8>
.ENDM

	.MACRO TSPCL
	.BYTE 5
	.ENDM
	
	.MACRO TSLIM
	.BYTE 6
	.ENDM
	
.MACRO OBJEND
.BYTE 0FF
.ENDM

.INCLUDE ASCVG		;<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	.PAGE
.LIST MEB
.NLIST BYT
	.SBTTL DATA STRUCTURES
	.MSNUM=0
	.MACRO ASCVH ARG1,ARG2,ARG3,.STRNG
	.BYTE ARG2,ARG3
	.ASCVG <.STRNG>
	ARG1=.MSNUM
	.MSNUM=.MSNUM+2
	.ENDM

ENGMSG:	.WORD ETOMSG,LFTMSG,RITMSG,RERMSG
	.WORD L2MSG,L3MSG,L4MSG,CHIMSG
	.WORD RNGMSG,BLKMSG,GMOMSG,PSTMSG
	.WORD YSCMSG,HISMSG,ZERMSG,L1MSG
	.WORD COIN1,COIN2,COIN3,COIN4
	.WORD INSMSG,BONMSG,BONMS1,CPYMSG

ETOMSG:	ASCVH ETO,-110.,74.,<ENEMY TO >
LFTMSG:	ASCVH LEFT,0,0,<LEFT>
RITMSG:	ASCVH RIGHT,0,0,<RIGHT>
RERMSG:	ASCVH REAR,0,0,<REAR>
L2MSG:	ASCVH LINE2,7.,26.,<ENTER YOUR INITIALS>
L3MSG:	ASCVH LINE3,-60.,16.,<CHANGE LETTER WITH RIGHT HAND CONTROLLER>
L4MSG:	ASCVH LINE4,-45.,8.,<SELECT LETTER WITH FIRE BUTTON>
CHIMSG:	ASCVH CHISCR,32.,70.,<HIGH SCORE      000>
RNGMSG:	ASCVH ERANGE,-110.,90.,<ENEMY IN RANGE>
BLKMSG:	ASCVH BLOCKD,-110.,82.,<MOTION BLOCKED BY OBJECT>
GMOMSG:	ASCVH GAMOVR,-28.,24.,<GAME OVER>
PSTMSG:	ASCVH PRSTRT,-34.,0.,<PRESS START>
YSCMSG:	ASCVH YSCORE,32.,80.,<SCORE     000>
HISMSG:	ASCVH HISCOR,-28.,40.,<HIGH SCORES>
ZERMSG:	ASCVH ZEROS,0,0,<000 >
L1MSG:	ASCVH LINE1,-64.,24.,<GREAT SCORE>
COIN1:	ASCVH MODE1,-50.,0.,<1       2     S>
COIN2:	ASCVH MODE2,-50.,0.,<1       1>
COIN3:	ASCVH MODE3,-50.,0.,<2     S 1>
COIN4:	ASCVH CONPLY,-50.,0.,<  COIN    PLAY>
INSMSG:	ASCVH INSCON,-36.,-22.,<INSERT COIN>

BONMSG:	ASCVH BONPLN,-87.,-70.,<BONUS TANK AT >
BONMS1: ASCVH BONPL1,0,0,<000 AND 100000>
CPYMSG:	.BYTE -42.,-60.,4E,50
	.ASCVG	<  ATARI 1980>
COPYRT	=.MSNUM
.MSNUM	=.MSNUM+2
	.MACRO ASCVL ARG1,ARG2,.STRNG
	.BYTE ARG1,ARG2
	.ASCVG <.STRNG>
	.ENDM

FRNMSG:	.WORD FR1,FR2,FR3,FR4
	.WORD FR5,FR6,FR7,FR8
	.WORD FR9,FRA,FRB,FRC
	.WORD YSCMSG,FRE,ZERMSG,FR10
	.WORD FR11,FR12,FR13,FR14
	.WORD FR15,FR16,FR17,CPYMSG

FR1:	ASCVL -120.,74.,<ENNEMI >
FR2:	ASCVL 0,0,<A GAUCHE>
FR3:	ASCVL 0,0,<A DROITE>
FR4:	ASCVL 0,0,<DERRIERE>
FR5:	ASCVL 7,26.,<COMPOSER VOS INITIALES>
FR6:	ASCVL -76.,16.,<CHOISISSEZ VOTRE LETTRE AVEC LE CONTROLEUR DE DROITE>
FR7:	ASCVL -65.,8.,<APPUYER SUR FEU POUR SELECTION DE LETTRE>
FR8:	ASCVL 32.,70.,<MEILLEUR SCORE      000>
FR9:	ASCVL -120.,90.,<ENNEMI A PORTEE>
FRA:	ASCVL -120.,82.,<ATTENTION OBSTACLE>
FRB:	ASCVL -32.,24.,<FIN DE PARTIE>
FRC:	ASCVL -50.,0,<APPUYEZ SUR START>
FRE:	ASCVL -36.,40.,<MEILLEURS SCORE>
FR10:	ASCVL -64.,24.,<SCORE ELEVE>
FR11:	ASCVL -58.,0,<1        2       S>
FR12:	ASCVL -58.,0,<1        1>
FR13:	ASCVL -58.,0,<2      S 1>
FR14:	ASCVL -58.,0,<  PIECE    JOUEUR>
FR15:	ASCVL -54.,-22.,<INTRODUIRE LES PIECES>
FR16:	ASCVL -66.,-70.,<BONUS A >
FR17:	ASCVL 0,0,<000 ET 100000>

SPNMSG:	.WORD SPN1,SPN2,SPN3,SPN4
	.WORD SPN5,SPN6,SPN7,SPN8
	.WORD SPN9,SPNA,SPNB,SPNC
	.WORD SPND,SPNE,ZERMSG,SPN10
	.WORD FR11,FR12,FR13,SPN14
	.WORD SPN15,SPN16,SPN17,CPYMSG

SPN1:	ASCVL -123.,74.,<ENEMIGO MUY >
SPN2:	ASCVL 0,0,<A LA IZQUIERDA>
SPN3:	ASCVL 0,0,<A LA DERECHA>
SPN4:	ASCVL 0,0,<ATRAS>
SPN5:	ASCVL 2.,26.,<GRABE SUS INICIALES>
SPN6:	ASCVL -62.,16.,<SELECCIONE LETRA CON CONTROL DERECHO>
SPN7:	ASCVL -55.,8.,<GRABELA CON EL BOTON DE DISPARO>
SPN8:	ASCVL 32.,70.,<PUNTOS MAYORES     000>
SPN9:	ASCVL -123.,90.,<ENEMIGO EN RANGO>
SPNA:	ASCVL -123.,82.,<MOVIMIENTO BLOQUEADO POR OBJETO>
SPNB:	ASCVL -40.,24.,<JUEGO TERMINADO>
SPNC:	ASCVL -34.,0.,<PULSAR START>
SPND:	ASCVL 32.,80.,<PUNTOS     000>
SPNE:	ASCVL -14.,40.,<RECORDS>
SPN10:	ASCVL -88.,24.,<PUNTOS GRANDES>
SPN14:	ASCVL -58.,0,<  FICHA     JEUGO>
SPN15:	ASCVL -40.,-22.,<INSERTE FICHAS>
SPN16:	ASCVL -78.,-70.,<VIDA EXTRA A >
SPN17:	ASCVL 0,0,<000 Y 100000>

GRMMSG:	.WORD GRM1,GRM2,GRM3,GRM4
	.WORD GRM5,GRM6,GRM7,GRM8
	.WORD GRM9,GRMA,GRMB,GRMC
	.WORD GRMD,GRME,ZERMSG,GRM10
	.WORD GRM11,GRM12,GRM13,GRM14
	.WORD GRM15,GRM16,GRM17,CPYMSG

GRM1:	ASCVL -123.,74.,<GEGNER VON >
GRM2:	ASCVL 0,0,<LINKS>
GRM3:	ASCVL 0,0,<RECHTS>
GRM4:	ASCVL 0,0,<HINTEN>
GRM5:	ASCVL 32.,26.,<GEBEN SIE IHRE INITIALEN EIN>
GRM6:	ASCVL -78.,16.,<WAEHLEN SIE DEN BUCHSTABEN MIT DEM RECHTEN STEUERGRIFF>
GRM7:	ASCVL -60.,8.,<GEBEN SIE DEN BUCHSTABEN MIT DEM FEUERKNOPF EIN>
GRM8:	ASCVL 32.,70.,<BESTE PUNKTZAHL      000>
GRM9:	ASCVL -123.,90.,<GEGNER IM FEUERBEREICH>
GRMA:	ASCVL -123.,82.,<BEWEGUNG BLOCKIERT>
GRMB:	ASCVL -28.,24.,<SPIELENDE>
GRMC:	ASCVL -58.,0.,<STARTKNOPF DRUECKEN>
GRMD:	ASCVL 32.,80.,<PUNKTZAHL    000>
GRME:	ASCVL -42.,40.,<HOECHSTERGEBNISSE>
GRM10:	ASCVL -104.,24.,<GROSSARTIGES ERGEBNIS>
GRM11:	ASCVL -54.,0,<1         2      E>
GRM12:	ASCVL -54.,0,<1         1>
GRM13:	ASCVL -54.,0,<2       N 1>
GRM14:	ASCVL -54.,0,<  MUENZE    SPIEL>
GRM15:	ASCVL -40.,-22.,<GELD EINWERFEN>
GRM16:	ASCVL -73.,-70.,<BONUS BEI >
GRM17:	ASCVL 0,0,<000 UND 100000>
OBJTBL:	.WORD PYROBJ,CUBOBJ,TNKOBJ,SHLOBJ
	.REPT 8
	.WORD TREADS
	.ENDR
	.WORD PYROBJ,RDROBJ,EXPOBJ,CUBOBJ
	.WORD EX1OBJ,EX2OBJ,EX0OBJ,RDROBJ
	.WORD EX2OBJ,EX1OBJ,R2DOBJ,BT0OBJ
	.WORD EX2OBJ,EX4OBJ,EX1OBJ,EX3OBJ
	.WORD EX1OBJ,EX4OBJ,BT1OBJ,BT2OBJ
	.WORD SAUOBJ,TR7OBJ,0,0
	.REPT 8
	.WORD EXHOBJ
	.ENDR
CHKS6:	.BYTE 0DD
PYROBJ:	TLABS 0
	SBRITE 0A0
	TVCTR 4
	TVCTR 1
	TVCTR 0
	TVCTR 3
	TVCTR 4
	TVCTR 2
	TVCTR 3
	BVCTR 2
	TVCTR 1
	OBJEND
CUBOBJ:	TLABS 0
	SBRITE 0A0
	TVCTR 1
	TVCTR 2
	TVCTR 3
	TVCTR 0
	TVCTR 4
	TVCTR 5
	TVCTR 6
	TVCTR 7
	TVCTR 4
	BVCTR 5
	TVCTR 1
	BVCTR 2
	TVCTR 6
	BVCTR 7
	TVCTR 3
	OBJEND
TNKOBJ:	TLABS 17
	SBRITE 0A0
	TVCTR 16
	BVCTR 0C
	TVCTR 0D
	BVCTR 0E
	TVCTR 14
	TVCTR 12
	TVCTR 0F
	TVCTR 0E
	TVCTR 11
	TVCTR 10
	TVCTR 13
	TVCTR 15
	TVCTR 11
	BVCTR 0F
	TVCTR 10
	BVCTR 13
	TVCTR 12
	BVCTR 14
	TVCTR 15
	TLABS 3
	TVCTR 0
	TVCTR 4
	TVCTR 7
	TVCTR 6
	TVCTR 2
	TVCTR 3
	TVCTR 7
	TVCTR 0B
	TVCTR 0A
	TVCTR 6
	TVCTR 5
	TVCTR 9
	TVCTR 0A
	TVCTR 0D
	TVCTR 9
	TVCTR 8
	TVCTR 0B
	TVCTR 0C
	TVCTR 8
	TVCTR 4
	TVCTR 5
	TVCTR 1
	TVCTR 2
	BVCTR 1
	TVCTR 0
	OBJEND
SHLOBJ:	TLABS 0
	SBRITE 0E0
	TVCTR 4
	TVCTR 1
	TVCTR 0
	TVCTR 3
	TVCTR 4
	TVCTR 2
	TVCTR 3
	BVCTR 2
	TVCTR 1
	OBJEND
TREADS:	TLABS 0
	SBRITE 80
	TVCTR 1
	BVCTR 2
	TVCTR 3
	BVCTR 4
	TVCTR 5
	OBJEND
RDROBJ:	TLABS 0
	SBRITE 0A0
	TVCTR 1
	TVCTR 2
	TVCTR 3
	TVCTR 0
	TVCTR 4
	TVCTR 5
	TVCTR 6
	TVCTR 7
	TVCTR 4
	BVCTR 7
	TVCTR 3
	OBJEND
EXPOBJ:	TLABS 0
	TSPCL
	OBJEND
EX0OBJ:	TLABS 0
	SBRITE 0A0
	TVCTR 1
	TVCTR 2
	TVCTR 3
	TVCTR 0
	TVCTR 4
	TVCTR 5
	TVCTR 1
	BVCTR 5
	TVCTR 2
	BVCTR 3
	TVCTR 4
	BVCTR 6
	TVCTR 0C
	TVCTR 0A
	TVCTR 7
	TVCTR 6
	TVCTR 9
	TVCTR 8
	TVCTR 0B
	TVCTR 0D
	TVCTR 9
	BVCTR 7
	TVCTR 8
	BVCTR 0B
	TVCTR 0A
	BVCTR 0C
	TVCTR 0D
	OBJEND
EX1OBJ:	TLABS 0
	SBRITE 0A0
	TVCTR 3
	TVCTR 5
	TVCTR 2
	TVCTR 0
	TVCTR 1
	TVCTR 2
	TVCTR 5
	TVCTR 4
	TVCTR 1
	BVCTR 4
	TVCTR 3
	OBJEND
EX2OBJ:	TLABS 0
	SBRITE 0A0
	TVCTR 1
	TVCTR 2
	TVCTR 3
	TVCTR 0
	TVCTR 4
	TVCTR 6
	TVCTR 7
	TVCTR 5
	TVCTR 4
	BVCTR 5
	TVCTR 1
	BVCTR 7
	TVCTR 2
	BVCTR 3
	TVCTR 6
	OBJEND
R2DOBJ:	TLABS 0D
	SBRITE 0A0
	TVCTR 0C
	TVCTR 6
	TVCTR 0
	TVCTR 1
	TVCTR 7
	TVCTR 8
	TVCTR 9
	TVCTR 0A
	TVCTR 0B
	TVCTR 6
	TVCTR 7
	TVCTR 0C
	TVCTR 8
	TVCTR 2
	TVCTR 3
	TVCTR 9
	TVCTR 0C
	TVCTR 0A
	TVCTR 4
	TVCTR 5
	TVCTR 0B
	TVCTR 0C
	TLABS 18
	SBRITE 0E0
	TVCTR 17
	TVCTR 16
	TVCTR 18
	TVCTR 19
	TVCTR 17
	BVCTR 19
	TVCTR 16
	BVCTR 1
	SBRITE 0A0
	TVCTR 2
	BVCTR 3
	TVCTR 4
	BVCTR 5
	TVCTR 0
	TLABS 12
	TVCTR 13
	TVCTR 14
	TVCTR 15
	TVCTR 12
	TVCTR 0E
	TVCTR 0F
	TVCTR 10
	TVCTR 11
	TVCTR 0E
	BVCTR 0F
	TVCTR 13
	BVCTR 14
	TVCTR 10
	BVCTR 11
	TVCTR 15
	OBJEND
SAUOBJ:	TLABS 10
	SBRITE 0A0
	TVCTR 8
	TVCTR 9
	TVCTR 10
	TVCTR 0A
	TVCTR 0B
	TVCTR 10
	TVCTR 0C
	TVCTR 0D
	TVCTR 10
	TVCTR 0E
	TVCTR 0F
	TVCTR 10
	TLABS 0
	TVCTR 7
	TVCTR 0F
	TVCTR 8
	TVCTR 0
	TVCTR 1
	TVCTR 9
	TVCTR 0A
	TVCTR 2
	TVCTR 3
	TVCTR 0B
	TVCTR 0C
	TVCTR 4
	TVCTR 5
	TVCTR 0D
	TVCTR 0E
	TVCTR 6
	TVCTR 7
	BVCTR 6
	TVCTR 5
	BVCTR 4
	TVCTR 3
	BVCTR 2
	TVCTR 1
	OBJEND
EX3OBJ:	TLABS 0
	SBRITE 0A0
	TVCTR 2
	TVCTR 1
	TVCTR 3
	TVCTR 0
	TVCTR 1
	BVCTR 2
	TVCTR 3
	OBJEND
EX4OBJ:	TLABS 1
	SBRITE 0A0
	TVCTR 2
	TVCTR 3
	TVCTR 7
	TVCTR 6
	TVCTR 5
	TVCTR 4
	TVCTR 0
	TVCTR 1
	TVCTR 5
	BVCTR 6
	TVCTR 2
	OBJEND
	
EXHOBJ:	TLABS 7
	SBRITE 0A0
	TDOT 0
	TDOT 1
	TDOT 2
	TDOT 3
	TDOT 4
	TDOT 5
	TDOT 6
	TDOT 7
	OBJEND
TR7OBJ:	TLABS 0
	SBRITE 0A0
	TVCTR 1
	TVCTR 4
	TVCTR 0
	TVCTR 3
	TVCTR 2
	TVCTR 5
	TVCTR 3
	BVCTR 2
	TVCTR 1
	BVCTR 4
	TVCTR 5
	TLABS 9
	TVCTR 0A
	TVCTR 6
	TVCTR 0E
	TVCTR 0D
	TVCTR 9
	TVCTR 8
	TVCTR 7
	TVCTR 6
	TVCTR 0B
	TVCTR 0C
	TVCTR 8
	BVCTR 0C
	TVCTR 0D
	BVCTR 0E
	TVCTR 0B
	TLABS 13
	TVCTR 16
	TVCTR 15
	TVCTR 14
	TVCTR 10
	TVCTR 0F
	TVCTR 12
	TVCTR 11
	TVCTR 10
	BVCTR 0F
	TVCTR 13
	BVCTR 16
	TVCTR 12
	BVCTR 11
	TVCTR 15
	BVCTR 17
	SBRITE 0E0
	TVCTR 18
	OBJEND

BT0OBJ:	TLABS 0
	SBRITE 0F0
	TVCTR 1
	TVCTR 2
	TVCTR 3
	TVCTR 4
	TVCTR 5
	TVCTR 6
	TVCTR 0
	BVCTR 7
	TVCTR 8
	TVCTR 9
	TVCTR 0A
	TVCTR 0B
	TVCTR 7
	BVCTR 0C
	TVCTR 0D
	TVCTR 0E
	TVCTR 0F
	TVCTR 0C
	BVCTR 10
	TVCTR 11
	TVCTR 12
	TVCTR 13
	TVCTR 10
	OBJEND
	
BT1OBJ:	TLABS 0
	TVCTR 1
	TVCTR 2
	TVCTR 3
	TVCTR 4
	TVCTR 5
	TVCTR 6
	TVCTR 7
	TVCTR 8
	TVCTR 9
	TVCTR 0A
	TVCTR 0B
	TVCTR 0C
	TVCTR 0D
	TVCTR 0E
	TVCTR 0F
	TVCTR 7
	TVCTR 10
	TVCTR 11
	TVCTR 12
	TVCTR 13
	TVCTR 14
	TVCTR 0
	OBJEND
	
BT2OBJ:	TLABS 1
	TVCTR 0
	TVCTR 5
	TVCTR 4
	TVCTR 3
	TVCTR 2
	TVCTR 1
	TVCTR 3
	TVCTR 7
	TVCTR 6
	TVCTR 1
	BVCTR 9
	TVCTR 8
	TVCTR 0B
	TVCTR 0A
	TVCTR 9
	BVCTR 0E
	TVCTR 16
	TVCTR 17
	TVCTR 18
	TVCTR 0C
	TVCTR 0D
	TVCTR 0E
	TVCTR 0F
	TVCTR 10
	TVCTR 11
	TVCTR 12
	TVCTR 13
	TVCTR 14
	TVCTR 15
	TVCTR 16
	OBJEND
	.MACRO .NWORD ...1,...2,...3,...4,...5
	.IRP X,<'...1 ...2 ...3 ...4 ...5'>
	.WORD 4*X
	.ENDM
	.ENDM
PTBLX1:	.NWORD 800,0,0,1000
	.NWORD 2000,2000,2000,1000
	.NWORD 0C00,3000,3DC0,3200
	.NWORD 3600,2500,2600,3A00
	.NWORD 1C00,1E00,1000,900
	.NWORD 0B00
PTBLY1:	.NWORD 800,1000,2000,2000
	.NWORD 2000,1000,0,0
	.NWORD 1400,600,1100,1000
	.NWORD 2300,300,3A00,3900
	.NWORD 2700,3300,2D00,2F00
	.NWORD 3D00
	.RADIX 10
	.MACRO .MWORD ..A,..B,..C
	.NWORD ..A*4,..B*4,..C*2
	.ENDM
BATBL:	.BYTE TLETBL-BATBL
	.MWORD 14,320,4
	.MWORD 14,240,4
	.MWORD 42,200,11
	.MWORD 70,220,18
	.MWORD 100,200,25
	.MWORD 128,240,32
	.MWORD 128,320,32
	.MWORD 42,280,11
	.MWORD 42,260,11
	.MWORD 70,280,18
	.MWORD 100,260,25
	.MWORD 100,280,25
	.MWORD 14,200,4
	.MWORD 2,140,11
	.MWORD 14,80,4
	.MWORD 128,140,32
	.MWORD 56,160,14
	.MWORD 64,140,16
	.MWORD 56,120,14
	.MWORD 84,140,21
TLETBL:	.BYTE ZONTBL-TLETBL
	.MWORD 14,40,4
	.MWORD 100,20,25
	.MWORD 100,-40,25
	.MWORD 14,-60,4
	.MWORD 100,-80,25
	.MWORD 100,-140,25
	.MWORD 14,-140,4
	.MWORD 14,-240,4
	.MWORD 28,-340,7
	.MWORD 42,-280,11
	.MWORD 56,-280,14
	.MWORD 70,-320,18
	.MWORD 84,-280,21
	.MWORD 100,-280,25
	.MWORD 114,-340,28
	.MWORD 128,-240,32
	.MWORD 42,-180,11
	.MWORD 128,-180,32
	.MWORD 128,120,32
	.MWORD 100,120,25
	.MWORD 100,60,25
ZONTBL:	.BYTE ENDZON-ZONTBL
	.MWORD -128,300,-32
	.MWORD -128,140,-32
	.MWORD -100,220,-25
	.MWORD -14,140,-4
	.MWORD -14,300,-4
	.MWORD -42,220,-11
	.MWORD -128,20,-32
	.MWORD -14,20,-4
	.MWORD -100,100,-25
	.MWORD -100,60,-25
	.MWORD -42,60,-11
	.MWORD -42,100,-11
	.MWORD -128,0,-32
	.MWORD -70,-40,-18
	.MWORD -128,-160,-32
	.MWORD -114,-260,-28
	.MWORD -100,-200,-25
	.MWORD -84,-200,-21
	.MWORD -70,-240,-18
	.MWORD -56,-200,-14
	.MWORD -42,-200,-11
	.MWORD -28,-260,-7
	.MWORD -14,-160,-4
	.MWORD -70,-120,-18
	.MWORD -14,0,-4
ENDZON:
	.END
                                                                                            